{"ast":null,"code":"const Constants = require('../util/Constants');\n\nconst WebSocketConnection = require('./websocket/WebSocketConnection');\n/**\n * Manages the state and background tasks of the client.\n * @private\n */\n\n\nclass ClientManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this Manager\n     * @type {Client}\n     */\n    this.client = client;\n    /**\n     * The heartbeat interval\n     * @type {?number}\n     */\n\n    this.heartbeatInterval = null;\n  }\n  /**\n   * The status of the client\n   * @type {number}\n   */\n\n\n  get status() {\n    return this.connection ? this.connection.status : Constants.Status.IDLE;\n  }\n  /**\n   * Connects the client to the WebSocket.\n   * @param {string} token The authorization token\n   * @param {Function} resolve Function to run when connection is successful\n   * @param {Function} reject Function to run when connection fails\n   */\n\n\n  connectToWebSocket(token, resolve, reject) {\n    this.client.emit(Constants.Events.DEBUG, \"Authenticated using token \".concat(token));\n    this.client.token = token;\n    const timeout = this.client.setTimeout(() => reject(new Error(Constants.Errors.TOOK_TOO_LONG)), 1000 * 300);\n    this.client.rest.methods.getGateway().then(res => {\n      const protocolVersion = Constants.DefaultOptions.ws.version;\n      const gateway = \"\".concat(res.url, \"/?v=\").concat(protocolVersion, \"&encoding=\").concat(WebSocketConnection.ENCODING);\n      this.client.emit(Constants.Events.DEBUG, \"Using gateway \".concat(gateway));\n      this.client.ws.connect(gateway);\n      this.client.ws.connection.once('error', reject);\n      this.client.ws.connection.once('close', event => {\n        if (event.code === 4004) reject(new Error(Constants.Errors.BAD_LOGIN));\n        if (event.code === 4010) reject(new Error(Constants.Errors.INVALID_SHARD));\n        if (event.code === 4011) reject(new Error(Constants.Errors.SHARDING_REQUIRED));\n      });\n      this.client.once(Constants.Events.READY, () => {\n        resolve(token);\n        this.client.clearTimeout(timeout);\n      });\n    }, reject);\n  }\n\n  destroy() {\n    this.client.ws.destroy();\n    this.client.rest.destroy();\n    if (!this.client.user) return Promise.resolve();\n\n    if (this.client.user.bot) {\n      this.client.token = null;\n      return Promise.resolve();\n    } else {\n      return this.client.rest.methods.logout().then(() => {\n        this.client.token = null;\n      });\n    }\n  }\n\n}\n\nmodule.exports = ClientManager;","map":null,"metadata":{},"sourceType":"script"}