{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chand\\\\Desktop\\\\electron-discord\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst electron = window.require('electron');\n\nconst ipcRenderer = electron.ipcRenderer;\n\nconst Discord = require('discord.js');\n\nconst client = new Discord.Client();\n\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\nvar globalPage;\nclient.on('ready', () => {\n  console.log(\"\\n\\n\\nLogged in as \".concat(client.user.tag, \"!\"));\n  globalPage.setState({\n    guilds: client.guilds.array().map(x => {\n      return React.createElement(\"img\", {\n        onClick: () => clickGuild(x),\n        class: \"guildIcon\",\n        src: x.iconURL,\n        alt: x.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      });\n    }),\n    channels: client.channels.array().map(x => {\n      if (x.type == 'text') {\n        return React.createElement(\"div\", {\n          onClick: () => clickChannel(x),\n          class: \"channel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, x.name);\n      }\n    })\n  });\n});\nclient.on('message', msg => {\n  globalPage.setState({\n    messages: globalPage.state.messages.concat(createMessage(msg))\n  });\n});\nclient.on('channelCreate', channel => {\n  globalPage.setState({\n    channels: globalPage.state.channels.concat(React.createElement(\"div\", {\n      onClick: () => clickChannel(channel),\n      class: \"channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, channel.name))\n  });\n});\n\nfunction clickChannel(channel) {\n  console.log(channel.type != 'text');\n\n  if (channel.type != 'text') {\n    return;\n  }\n\n  var messages;\n  channel.fetchMessages().then(msgs => {\n    globalPage.setState({\n      messages: msgs.map(x => {\n        return createMessage(x);\n      }).reverse()\n    });\n  });\n}\n\nfunction clickGuild(guild) {\n  globalPage.setState({\n    channels: guild.channels.map(x => {\n      if (x.type == 'text') {\n        return React.createElement(\"div\", {\n          onClick: () => clickChannel(x),\n          class: \"channel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, x.name);\n      }\n    })\n  });\n}\n\nfunction createMessage(msg) {\n  var nameColor = {\n    color: 'white',\n    color: msg.member.displayHexColor\n  };\n  var messageText = msg.cleanContent; //\tlet match=messageText.match(/\\*\\*[^\\*]+\\*\\*/)\n  //\tif(match!=null){\n  //\t\tmatch[0]=\"<b>\"+match[0].slice(2,-2)+\"</b>\";\n  //\t\tmessageText=messageText.slice(0,match.index)+match[0]+messageText.slice(match.index+match[0].length);\n  //\t\t//match=messageText.match(/\\*\\*[^\\*]+\\*\\*/);\n  //\t}\n\n  return React.createElement(\"div\", {\n    class: \"message\",\n    messageid: msg.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"messageAuthor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, msg.author.tag), React.createElement(\"div\", {\n    style: nameColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, msg.member.displayName), React.createElement(\"input\", {\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    class: \"messageText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, messageText));\n}\n\nfunction printMessages() {\n  console.log(globalPage.state.messages);\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: \"guilds\",\n      channels: 'channels',\n      messages: 'messages',\n      members: 'members'\n    };\n    globalPage = this;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Guilds, {\n      guilds: this.state.guilds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Channels, {\n      channels: this.state.channels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Members, {\n      members: this.state.members,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Guilds extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: this.props.guilds\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      guilds: props.guilds\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"guilds\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.guilds);\n  }\n\n}\n\nclass Channels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channels: this.props.channels\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      channels: props.channels\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.channels);\n  }\n\n}\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      messages: props.messages\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onclick: printMessages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Click Me!\"), this.state.messages);\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Members extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      members: this.props.members\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      members: props.members\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"members\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.state.members);\n  }\n\n}\n\nReactDOM.render(React.createElement(Page, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 209\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/chand/Desktop/electron-discord/src/index.js"],"names":["React","ReactDOM","electron","window","require","ipcRenderer","Discord","client","Client","auth","login","token","globalPage","on","console","log","user","tag","setState","guilds","array","map","x","clickGuild","iconURL","name","channels","type","clickChannel","msg","messages","state","concat","createMessage","channel","fetchMessages","then","msgs","reverse","guild","nameColor","color","member","displayHexColor","messageText","cleanContent","id","float","author","displayName","printMessages","Page","Component","constructor","props","members","render","showMessages","Guilds","componentWillReceiveProps","Channels","Messages","Members","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst electron = window.require('electron');\nconst ipcRenderer = electron.ipcRenderer;\n\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\n\n\nvar globalPage;\nclient.on('ready', () => {\n    console.log(`\\n\\n\\nLogged in as ${client.user.tag}!`);\n    \n   \tglobalPage.setState({\n   \t\tguilds:client.guilds.array().map(x=>{\n   \t\t\treturn <img onClick={()=>clickGuild(x)} class=\"guildIcon\" src={x.iconURL} alt={x.name}/>\n   \t\t}),\n   \t\tchannels:client.channels.array().map(x=>{\n   \t\t\tif (x.type=='text'){\n\t   \t\t\treturn <div onClick={()=>clickChannel(x)}  class=\"channel\">{x.name}</div>\n\t   \t\t}\n   \t\t})\n   \t})\n});\n\nclient.on('message', msg => {\n\tglobalPage.setState({\n\t\tmessages:globalPage.state.messages.concat(createMessage(msg)),\n\t});\n});\nclient.on('channelCreate',channel=>{\n\tglobalPage.setState({\n\t\tchannels:globalPage.state.channels.concat(<div onClick={()=>clickChannel(channel)}  class=\"channel\">{channel.name}</div>),\n\t})\n})\n\nfunction clickChannel(channel){\n\tconsole.log(channel.type!='text');\n\tif (channel.type!='text'){\n\t\treturn;\n\t}\n\n\tvar messages;\n\tchannel.fetchMessages().then(msgs=>{\n\t\tglobalPage.setState({\n\t\t\tmessages:msgs.map(x=>{return createMessage(x)}).reverse()\n\t\t})\n\t});\n}\nfunction clickGuild(guild){\n\tglobalPage.setState({\n\t\tchannels:guild.channels.map(x=>{\n\t\t\tif (x.type=='text'){\n\t   \t\t\treturn <div onClick={()=>clickChannel(x)} class=\"channel\">{x.name}</div>\n\t   \t\t}\n\t\t})\n\t});\n}\nfunction createMessage(msg){\n\tvar nameColor={\n\t\tcolor:'white',\n\t\tcolor:msg.member.displayHexColor,\n\t}\n\t\n\tvar messageText=msg.cleanContent;\n\t\n//\tlet match=messageText.match(/\\*\\*[^\\*]+\\*\\*/)\n//\tif(match!=null){\n//\t\tmatch[0]=\"<b>\"+match[0].slice(2,-2)+\"</b>\";\n//\t\tmessageText=messageText.slice(0,match.index)+match[0]+messageText.slice(match.index+match[0].length);\n//\t\t//match=messageText.match(/\\*\\*[^\\*]+\\*\\*/);\n//\t}\n\t\n\treturn (<div class = \"message\" messageid={msg.id}>\n\t\t\t\t<div class=\"messageAuthor\">\n\t\t\t\t\t<div style={{float:'right'}}>{msg.author.tag}</div>\n\t\t\t\t\t<div style={nameColor}>{msg.member.displayName}</div>\n\t\t\t\t\t<input type=\"checkbox\"></input>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"messageText\">{messageText}</div>\n\t\t\t</div>)\n}\nfunction printMessages(){\n\tconsole.log(globalPage.state.messages);\n}\nclass Page extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:\"guilds\",\n\t\t\tchannels:'channels',\n\t\t\tmessages:'messages',\n\t\t\tmembers:'members'\n\t\t}\n\t\tglobalPage=this;\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Guilds guilds={this.state.guilds}/>\n\t\t\t\t<Channels channels={this.state.channels}/>\n\t\t\t\t<Messages messages={this.state.messages}/>\n\t\t\t\t<Members members={this.state.members}/>\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Guilds extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:this.props.guilds,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tguilds:props.guilds,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"guilds\">\n\t\t\t\t{this.state.guilds}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Channels extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tchannels:this.props.channels,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tchannels:props.channels,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"channels\">\n\t\t\t\t{this.state.channels}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Messages extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmessages:this.props.messages,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmessages:props.messages\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"messages\">\n\t\t\t\t<button type=\"button\" onclick={printMessages()}>Click Me!</button>\n\t\t\t\t{this.state.messages}\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Members extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmembers:this.props.members,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmembers:props.members\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"members\">\n\t\t\t\t{this.state.members}\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nReactDOM.render(\n\t<Page />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}