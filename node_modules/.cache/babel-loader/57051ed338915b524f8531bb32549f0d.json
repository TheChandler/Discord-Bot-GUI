{"ast":null,"code":"const Long = require('long'); // Discord epoch (2015-01-01T00:00:00.000Z)\n\n\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n/**\n * A container for useful snowflake-related methods.\n */\n\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(\"The \".concat(this.constructor.name, \" class may not be instantiated.\"));\n  }\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n\n\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\"\\\"timestamp\\\" argument must be a number (received \".concat(isNaN(timestamp) ? 'NaN' : typeof timestamp, \")\"));\n    }\n\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = \"\".concat(pad((timestamp - EPOCH).toString(2), 42), \"0000100000\").concat(pad((INCREMENT++).toString(2), 12));\n    return Long.fromString(BINARY, 2).toString();\n  }\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n\n\n  static deconstruct(snowflake) {\n    const BINARY = pad(Long.fromString(snowflake).toString(2), 64);\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true\n    });\n    return res;\n  }\n\n}\n\nfunction pad(v, n, c = '0') {\n  return String(v).length >= n ? String(v) : (String(c).repeat(n) + v).slice(-n);\n}\n\nmodule.exports = SnowflakeUtil;","map":null,"metadata":{},"sourceType":"script"}