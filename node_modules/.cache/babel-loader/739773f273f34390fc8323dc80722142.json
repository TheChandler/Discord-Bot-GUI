{"ast":null,"code":"/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n * <info>This class is only used for *received* embeds. If you wish to send one, use the {@link RichEmbed} class.</info>\n */\nclass MessageEmbed {\n  constructor(message, data) {\n    /**\n     * The client that instantiated this embed\n     * @name MessageEmbed#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: message.client\n    });\n    /**\n     * The message this embed is part of\n     * @type {Message}\n     */\n\n    this.message = message;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The type of this embed\n     * @type {string}\n     */\n    this.type = data.type;\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n\n    this.title = data.title;\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n\n    this.description = data.description;\n    /**\n     * The URL of this embed\n     * @type {string}\n     */\n\n    this.url = data.url;\n    /**\n     * The color of the embed\n     * @type {number}\n     */\n\n    this.color = data.color;\n    /**\n     * The fields of this embed\n     * @type {MessageEmbedField[]}\n     */\n\n    this.fields = [];\n    if (data.fields) for (const field of data.fields) this.fields.push(new MessageEmbedField(this, field));\n    /**\n     * The timestamp of this embed\n     * @type {number}\n     */\n\n    this.timestamp = data.timestamp;\n    /**\n     * The thumbnail of this embed\n     * @type {?MessageEmbedThumbnail}\n     */\n\n    this.thumbnail = data.thumbnail ? new MessageEmbedThumbnail(this, data.thumbnail) : null;\n    /**\n     * The image of this embed\n     * @type {?MessageEmbedImage}\n     */\n\n    this.image = data.image ? new MessageEmbedImage(this, data.image) : null;\n    /**\n     * The video of this embed\n     * @type {?MessageEmbedVideo}\n     */\n\n    this.video = data.video ? new MessageEmbedVideo(this, data.video) : null;\n    /**\n     * The author of this embed\n     * @type {?MessageEmbedAuthor}\n     */\n\n    this.author = data.author ? new MessageEmbedAuthor(this, data.author) : null;\n    /**\n     * The provider of this embed\n     * @type {?MessageEmbedProvider}\n     */\n\n    this.provider = data.provider ? new MessageEmbedProvider(this, data.provider) : null;\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n\n    this.footer = data.footer ? new MessageEmbedFooter(this, data.footer) : null;\n  }\n  /**\n   * The date this embed was created\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get hexColor() {\n    if (!this.color) return null;\n    let col = this.color.toString(16);\n\n    while (col.length < 6) col = \"0\".concat(col);\n\n    return \"#\".concat(col);\n  }\n\n}\n/**\n * Represents a thumbnail for a message embed.\n */\n\n\nclass MessageEmbedThumbnail {\n  constructor(embed, data) {\n    /**\n     * The embed this thumbnail is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The URL for this thumbnail\n     * @type {string}\n     */\n    this.url = data.url;\n    /**\n     * The Proxy URL for this thumbnail\n     * @type {string}\n     */\n\n    this.proxyURL = data.proxy_url;\n    /**\n     * The height of the thumbnail\n     * @type {number}\n     */\n\n    this.height = data.height;\n    /**\n     * The width of the thumbnail\n     * @type {number}\n     */\n\n    this.width = data.width;\n  }\n\n}\n/**\n * Represents an image for a message embed.\n */\n\n\nclass MessageEmbedImage {\n  constructor(embed, data) {\n    /**\n     * The embed this image is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The URL for this image\n     * @type {string}\n     */\n    this.url = data.url;\n    /**\n     * The Proxy URL for this image\n     * @type {string}\n     */\n\n    this.proxyURL = data.proxy_url;\n    /**\n     * The height of the image\n     * @type {number}\n     */\n\n    this.height = data.height;\n    /**\n     * The width of the image\n     * @type {number}\n     */\n\n    this.width = data.width;\n  }\n\n}\n/**\n * Represents a video for a message embed.\n */\n\n\nclass MessageEmbedVideo {\n  constructor(embed, data) {\n    /**\n     * The embed this video is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The source URL for this video\n     * @type {string}\n     */\n    this.url = data.url;\n    /**\n     * The height of the video\n     * @type {number}\n     */\n\n    this.height = data.height;\n    /**\n     * The width of the video\n     * @type {number}\n     */\n\n    this.width = data.width;\n  }\n\n}\n/**\n * Represents a provider for a message embed.\n */\n\n\nclass MessageEmbedProvider {\n  constructor(embed, data) {\n    /**\n     * The embed this provider is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this provider\n     * @type {string}\n     */\n    this.name = data.name;\n    /**\n     * The URL of this provider\n     * @type {string}\n     */\n\n    this.url = data.url;\n  }\n\n}\n/**\n * Represents an author for a message embed.\n */\n\n\nclass MessageEmbedAuthor {\n  constructor(embed, data) {\n    /**\n     * The embed this author is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this author\n     * @type {string}\n     */\n    this.name = data.name;\n    /**\n     * The URL of this author\n     * @type {string}\n     */\n\n    this.url = data.url;\n    /**\n     * The icon URL of this author\n     * @type {string}\n     */\n\n    this.iconURL = data.icon_url;\n  }\n\n}\n/**\n * Represents a field for a message embed.\n */\n\n\nclass MessageEmbedField {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this field\n     * @type {string}\n     */\n    this.name = data.name;\n    /**\n     * The value of this field\n     * @type {string}\n     */\n\n    this.value = data.value;\n    /**\n     * If this field is displayed inline\n     * @type {boolean}\n     */\n\n    this.inline = data.inline;\n  }\n\n}\n/**\n * Represents the footer of a message embed.\n */\n\n\nclass MessageEmbedFooter {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The text in this footer\n     * @type {string}\n     */\n    this.text = data.text;\n    /**\n     * The icon URL of this footer\n     * @type {string}\n     */\n\n    this.iconURL = data.icon_url;\n    /**\n     * The proxy icon URL of this footer\n     * @type {string}\n     */\n\n    this.proxyIconUrl = data.proxy_icon_url;\n  }\n\n}\n\nMessageEmbed.Thumbnail = MessageEmbedThumbnail;\nMessageEmbed.Image = MessageEmbedImage;\nMessageEmbed.Video = MessageEmbedVideo;\nMessageEmbed.Provider = MessageEmbedProvider;\nMessageEmbed.Author = MessageEmbedAuthor;\nMessageEmbed.Field = MessageEmbedField;\nMessageEmbed.Footer = MessageEmbedFooter;\nmodule.exports = MessageEmbed;","map":null,"metadata":{},"sourceType":"script"}