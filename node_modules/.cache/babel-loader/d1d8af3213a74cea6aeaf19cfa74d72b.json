{"ast":null,"code":"const RequestHandler = require('./RequestHandler');\n\nconst DiscordAPIError = require('../DiscordAPIError');\n\nconst _require = require('../../../util/Constants'),\n      RATE_LIMIT = _require.Events.RATE_LIMIT;\n\nclass BurstRequestHandler extends RequestHandler {\n  constructor(restManager, endpoint) {\n    super(restManager, endpoint);\n    this.client = restManager.client;\n    this.limit = Infinity;\n    this.resetTime = null;\n    this.remaining = 1;\n    this.timeDifference = 0;\n    this.resetTimeout = null;\n  }\n\n  push(request) {\n    super.push(request);\n    this.handle();\n  }\n\n  execute(item) {\n    if (!item) return;\n    item.request.gen().end((err, res) => {\n      if (res && res.headers) {\n        this.limit = Number(res.headers['x-ratelimit-limit']);\n        this.resetTime = Number(res.headers['x-ratelimit-reset']) * 1000;\n        this.remaining = Number(res.headers['x-ratelimit-remaining']);\n        this.timeDifference = Date.now() - new Date(res.headers.date).getTime();\n      }\n\n      if (err) {\n        if (err.status === 429) {\n          this.queue.unshift(item);\n          if (res.headers['x-ratelimit-global']) this.globalLimit = true;\n          if (this.resetTimeout) return;\n          this.resetTimeout = this.client.setTimeout(() => {\n            this.remaining = this.limit;\n            this.globalLimit = false;\n            this.handle();\n            this.resetTimeout = null;\n          }, Number(res.headers['retry-after']) + this.client.options.restTimeOffset);\n        } else if (err.status >= 500 && err.status < 600) {\n          if (item.retries === this.client.options.retryLimit) {\n            item.reject(err);\n            this.handle();\n          } else {\n            item.retries++;\n            this.queue.unshift(item);\n            this.resetTimeout = this.client.setTimeout(() => {\n              this.handle();\n              this.resetTimeout = null;\n            }, 1e3 + this.client.options.restTimeOffset);\n          }\n        } else {\n          item.reject(err.status >= 400 && err.status < 500 ? new DiscordAPIError(res.request.path, res.body, res.request.method) : err);\n          this.handle();\n        }\n      } else {\n        if (this.remaining === 0) {\n          if (this.client.listenerCount(RATE_LIMIT)) {\n            this.client.emit(RATE_LIMIT, {\n              limit: this.limit,\n              timeDifference: this.timeDifference,\n              path: item.request.path,\n              method: item.request.method\n            });\n          }\n        }\n\n        this.globalLimit = false;\n        const data = res && res.body ? res.body : {};\n        item.resolve(data);\n        this.handle();\n      }\n    });\n  }\n\n  handle() {\n    super.handle();\n    if (this.queue.length === 0) return;\n    if ((this.remaining <= 0 || this.globalLimit) && Date.now() - this.timeDifference < this.resetTime) return;\n    this.execute(this.queue.shift());\n    this.remaining--;\n    this.handle();\n  }\n\n}\n\nmodule.exports = BurstRequestHandler;","map":null,"metadata":{},"sourceType":"script"}