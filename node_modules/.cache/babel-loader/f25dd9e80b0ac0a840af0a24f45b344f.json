{"ast":null,"code":"const path = require('path');\n\nconst fs = require('fs');\n\nconst snekfetch = require('snekfetch');\n\nconst Constants = require('../util/Constants');\n\nconst convertToBuffer = require('../util/Util').convertToBuffer;\n\nconst User = require('../structures/User');\n\nconst Message = require('../structures/Message');\n\nconst Guild = require('../structures/Guild');\n\nconst Channel = require('../structures/Channel');\n\nconst GuildMember = require('../structures/GuildMember');\n\nconst Emoji = require('../structures/Emoji');\n\nconst ReactionEmoji = require('../structures/ReactionEmoji');\n\nconst Role = require('../structures/Role');\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\n * extracting a User from a Message object.\n * @private\n */\n\n\nclass ClientDataResolver {\n  /**\n   * @param {Client} client The client the resolver is for\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A Guild object (owner of the guild)\n   * * A GuildMember object\n   * @typedef {User|Snowflake|Message|Guild|GuildMember} UserResolvable\n   */\n\n  /**\n   * Resolves a UserResolvable to a User object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n\n\n  resolveUser(user) {\n    if (user instanceof User) return user;\n    if (typeof user === 'string') return this.client.users.get(user) || null;\n    if (user instanceof GuildMember) return user.user;\n    if (user instanceof Message) return user.author;\n    if (user instanceof Guild) return user.owner;\n    return null;\n  }\n  /**\n   * Resolves a UserResolvable to a user ID string.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n\n\n  resolveUserID(user) {\n    if (user instanceof User || user instanceof GuildMember) return user.id;\n    if (typeof user === 'string') return user || null;\n    if (user instanceof Message) return user.author.id;\n    if (user instanceof Guild) return user.ownerID;\n    return null;\n  }\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A Snowflake\n   * @typedef {Guild|Snowflake} GuildResolvable\n   */\n\n  /**\n   * Resolves a GuildResolvable to a Guild object.\n   * @param {GuildResolvable} guild The GuildResolvable to identify\n   * @returns {?Guild}\n   */\n\n\n  resolveGuild(guild) {\n    if (guild instanceof Guild) return guild;\n    if (typeof guild === 'string') return this.client.guilds.get(guild) || null;\n    return null;\n  }\n  /**\n   * Data that resolves to give a GuildMember object. This can be:\n   * * A GuildMember object\n   * * A User object\n   * @typedef {GuildMember|User} GuildMemberResolvable\n   */\n\n  /**\n   * Resolves a GuildMemberResolvable to a GuildMember object.\n   * @param {GuildResolvable} guild The guild that the member is part of\n   * @param {UserResolvable} user The user that is part of the guild\n   * @returns {?GuildMember}\n   */\n\n\n  resolveGuildMember(guild, user) {\n    if (user instanceof GuildMember) return user;\n    guild = this.resolveGuild(guild);\n    user = this.resolveUser(user);\n    if (!guild || !user) return null;\n    return guild.members.get(user.id) || null;\n  }\n  /**\n   * Data that can be resolved to a Role object. This can be:\n   * * A Role\n   * * A Snowflake\n   * @typedef {Role|Snowflake} RoleResolvable\n   */\n\n  /**\n    * Resolves a RoleResolvable to a Role object.\n    * @param {GuildResolvable} guild The guild that this role is part of\n    * @param {RoleResolvable} role The role resolvable to resolve\n    * @returns {?Role}\n    */\n\n\n  resolveRole(guild, role) {\n    if (role instanceof Role) return role;\n    guild = this.resolveGuild(guild);\n    if (!guild) return null;\n    if (typeof role === 'string') return guild.roles.get(role);\n    return null;\n  }\n  /**\n   * Data that can be resolved to give a Channel object. This can be:\n   * * A Channel object\n   * * A Message object (the channel the message was sent in)\n   * * A Guild object (the #general channel)\n   * * A Snowflake\n   * @typedef {Channel|Guild|Message|Snowflake} ChannelResolvable\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a Channel object.\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Channel}\n   */\n\n\n  resolveChannel(channel) {\n    if (channel instanceof Channel) return channel;\n    if (typeof channel === 'string') return this.client.channels.get(channel) || null;\n    if (channel instanceof Message) return channel.channel;\n    if (channel instanceof Guild) return channel.channels.get(channel.id) || null;\n    return null;\n  }\n  /**\n   * Resolves a ChannelResolvable to a channel ID.\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n\n  resolveChannelID(channel) {\n    if (channel instanceof Channel) return channel.id;\n    if (typeof channel === 'string') return channel;\n    if (channel instanceof Message) return channel.channel.id;\n    if (channel instanceof Guild) return channel.defaultChannel.id;\n    return null;\n  }\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n\n\n  resolveInviteCode(data) {\n    const inviteRegex = /discord(?:app\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i;\n    const match = inviteRegex.exec(data);\n    if (match && match[1]) return match[1];\n    return data;\n  }\n  /**\n   * Data that can be resolved to give a string. This can be:\n   * * A string\n   * * An array (joined with a new line delimiter to give a string)\n   * * Any value\n   * @typedef {string|Array|*} StringResolvable\n   */\n\n  /**\n   * Resolves a StringResolvable to a string.\n   * @param {StringResolvable} data The string resolvable to resolve\n   * @returns {string}\n   */\n\n\n  resolveString(data) {\n    if (typeof data === 'string') return data;\n    if (data instanceof Array) return data.join('\\n');\n    return String(data);\n  }\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n\n\n  resolveImage(image) {\n    if (!image) return Promise.resolve(null);\n\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return Promise.resolve(image);\n    }\n\n    return this.resolveFile(image).then(this.resolveBase64);\n  }\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n\n\n  resolveBase64(data) {\n    if (data instanceof Buffer) return \"data:image/jpg;base64,\".concat(data.toString('base64'));\n    return data;\n  }\n  /**\n    * Data that can be resolved to give a Buffer. This can be:\n    * * A Buffer\n    * * The path to a local file\n    * * A URL\n    * * A Stream\n    * @typedef {string|Buffer} BufferResolvable\n    */\n\n  /**\n    * @external Stream\n    * @see {@link https://nodejs.org/api/stream.html}\n    */\n\n  /**\n    * Resolves a BufferResolvable to a Buffer.\n    * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n    * @returns {Promise<Buffer>}\n    */\n\n\n  resolveFile(resource) {\n    if (resource instanceof Buffer) return Promise.resolve(resource);\n    if (this.client.browser && resource instanceof ArrayBuffer) return Promise.resolve(convertToBuffer(resource));\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        return snekfetch.get(resource).then(res => res.body instanceof Buffer ? res.body : Buffer.from(res.text));\n      }\n\n      return new Promise((resolve, reject) => {\n        const file = path.resolve(resource);\n        fs.stat(file, (err, stats) => {\n          if (err) return reject(err);\n          if (!stats || !stats.isFile()) return reject(new Error(\"The file could not be found: \".concat(file)));\n          fs.readFile(file, (err2, data) => {\n            if (err2) reject(err2);else resolve(data);\n          });\n          return null;\n        });\n      });\n    } else if (resource && resource.pipe && typeof resource.pipe === 'function') {\n      return new Promise((resolve, reject) => {\n        const buffers = [];\n        resource.once('error', reject);\n        resource.on('data', data => buffers.push(data));\n        resource.once('end', () => resolve(Buffer.concat(buffers)));\n      });\n    }\n\n    return Promise.reject(new TypeError('The resource must be a string or Buffer.'));\n  }\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * A custom emoji ID\n   * * An Emoji object\n   * * A ReactionEmoji object\n   * @typedef {string|Emoji|ReactionEmoji} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n\n\n  resolveEmojiIdentifier(emoji) {\n    if (emoji instanceof Emoji || emoji instanceof ReactionEmoji) return emoji.identifier;\n\n    if (typeof emoji === 'string') {\n      if (this.client.emojis.has(emoji)) return this.client.emojis.get(emoji).identifier;else if (!emoji.includes('%')) return encodeURIComponent(emoji);else return emoji;\n    }\n\n    return null;\n  }\n  /**\n   * Can be a Hex Literal, Hex String, Number, RGB Array, or one of the following\n   * ```\n   * [\n   *   'DEFAULT',\n   *   'WHITE',\n   *   'AQUA',\n   *   'GREEN',\n   *   'BLUE',\n   *   'PURPLE',\n   *   'LUMINOUS_VIVID_PINK',\n   *   'GOLD',\n   *   'ORANGE',\n   *   'RED',\n   *   'GREY',\n   *   'DARKER_GREY',\n   *   'NAVY',\n   *   'DARK_AQUA',\n   *   'DARK_GREEN',\n   *   'DARK_BLUE',\n   *   'DARK_PURPLE',\n   *   'DARK_VIVID_PINK',\n   *   'DARK_GOLD',\n   *   'DARK_ORANGE',\n   *   'DARK_RED',\n   *   'DARK_GREY',\n   *   'LIGHT_GREY',\n   *   'DARK_NAVY',\n   *   'RANDOM',\n   * ]\n   * ```\n   * or something like\n   * ```\n   * [255, 0, 255]\n   * ```\n   * for purple\n   * @typedef {string|number|Array} ColorResolvable\n   */\n\n  /**\n   * Resolves a ColorResolvable into a color number.\n   * @param {ColorResolvable} color Color to resolve\n   * @returns {number} A color\n   */\n\n\n  static resolveColor(color) {\n    if (typeof color === 'string') {\n      if (color === 'RANDOM') return Math.floor(Math.random() * (0xFFFFFF + 1));\n      if (color === 'DEFAULT') return 0;\n      color = Constants.Colors[color] || parseInt(color.replace('#', ''), 16);\n    } else if (color instanceof Array) {\n      color = (color[0] << 16) + (color[1] << 8) + color[2];\n    }\n\n    if (color < 0 || color > 0xFFFFFF) {\n      throw new RangeError('Color must be within the range 0 - 16777215 (0xFFFFFF).');\n    } else if (color && isNaN(color)) {\n      throw new TypeError('Unable to convert color to a number.');\n    }\n\n    return color;\n  }\n  /**\n   * @param {ColorResolvable} color Color to resolve\n   * @returns {number} A color\n   */\n\n\n  resolveColor(color) {\n    return this.constructor.resolveColor(color);\n  }\n\n}\n\nmodule.exports = ClientDataResolver;","map":null,"metadata":{},"sourceType":"script"}