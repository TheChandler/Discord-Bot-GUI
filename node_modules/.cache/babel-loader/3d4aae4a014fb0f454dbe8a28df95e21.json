{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chand\\\\Desktop\\\\electron-discord\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; //const electron = window.require('electron');\n\nconst Discord = require('discord.js');\n\nconst client = new Discord.Client();\n\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\nvar globalPage;\nclient.on('ready', () => {\n  console.log(\"\\n\\n\\nLogged in as \".concat(client.user.tag, \"!\"));\n  let textChannels = [];\n  client.channels.array().map(x => {\n    if (x.type === 'text') {\n      textChannels.push(React.createElement(\"div\", {\n        onClick: () => clickChannel(x.id),\n        className: \"channel\",\n        key: x.id,\n        name: x.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, x.name));\n    }\n\n    return 0;\n  });\n  globalPage.setState({\n    guilds: client.guilds.array().map(x => {\n      return React.createElement(\"img\", {\n        onClick: () => clickGuild(x),\n        className: \"guildIcon\",\n        src: x.iconURL,\n        alt: x.name,\n        key: x.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    }),\n    channels: textChannels\n  });\n});\nclient.on('message', msg => {\n  globalPage.setState({\n    messages: globalPage.state.messages.concat(createMessage(msg))\n  });\n});\nclient.on('channelCreate', channel => {\n  globalPage.setState({\n    channels: globalPage.state.channels.concat(React.createElement(\"div\", {\n      onClick: () => clickChannel(channel.id),\n      className: \"channel\",\n      key: channel.id,\n      name: channel.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, channel.name))\n  });\n});\n\nfunction clickChannel(channel) {\n  if (channel.type !== 'text') {\n    return;\n  } //console.log(globalPage.state.channels);\n  //var messages;\n\n\n  let channels = globalPage.state.channels;\n  console.log(channel.id);\n\n  for (var i = 0; i < channels.length; i++) {\n    if (channels[i].key === channel.id) {\n      console.log(channels[i]);\n      channels[i] = React.createElement(\"div\", {\n        className: \"selectedChannel\",\n        key: channel.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, channel.name);\n    } else {\n      console.log(channels[i]);\n      console.log(channels[i].props.name);\n      console.log(channels[i].key);\n      channels[i] = React.createElement(\"div\", {\n        onClick: () => clickChannel(channels[i]),\n        className: \"channel\",\n        key: channels[i].key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, channels[i].props.name);\n    }\n  }\n\n  client.channels.forEach((val, key) => {\n    console.log(val);\n    console.log(key);\n  });\n  channel.fetchMessages().then(msgs => {\n    globalPage.setState({\n      messages: msgs.map(x => {\n        return createMessage(x);\n      }).reverse()\n    });\n  });\n}\n\nfunction clickGuild(guild) {\n  globalPage.setState({\n    channels: guild.channels.map(x => {\n      if (x.type === 'text') {\n        return React.createElement(\"div\", {\n          onClick: () => clickChannel(x),\n          className: \"channel\",\n          id: \"x.id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, x.name);\n      }\n\n      return 0;\n    })\n  });\n}\n\nfunction createMessage(msg) {\n  var nameColor = {\n    color: 'white',\n    color: msg.member.displayHexColor\n  };\n  var messageText = msg.cleanContent;\n  let match = messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n  var newMessageText;\n\n  while (match != null) {\n    newMessageText = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, newMessageText, messageText.slice(0, match.index), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, match[0].slice(2, -2)));\n    messageText = messageText.slice(match.index + match[0].length);\n    match = messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n  }\n\n  newMessageText = React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, newMessageText, messageText);\n  msg.attachments.forEach(val => {\n    newMessageText = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: val.url,\n      alt: \"\",\n      className: \"embededImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), newMessageText);\n  });\n  return React.createElement(\"div\", {\n    className: \"message\",\n    key: msg.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: msg.author.avatarURL,\n    alt: \"\",\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"messageAuthor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    type: \"checkbox\",\n    onClick: () => {\n      selectMessage(msg);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    style: {\n      float: 'right'\n    },\n    onClick: () => {\n      printMsg(msg);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, msg.author.tag), React.createElement(\"span\", {\n    style: nameColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, msg.member.displayName), React.createElement(\"span\", {\n    className: \"dateTime\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \" \", msg.createdAt.toLocaleString())), React.createElement(\"div\", {\n    className: \"messageText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, newMessageText)));\n}\n\nlet selectedMessages = new Map();\n\nfunction selectMessage(msg) {\n  selectedMessages.set(msg.id, msg);\n}\n\nfunction clearMessages() {\n  selectedMessages = new Map();\n}\n\nfunction printMessages() {\n  selectedMessages.forEach(printMsg);\n}\n\nfunction printMsg(val) {\n  console.log(val);\n}\n\nfunction deleteMessages() {\n  selectedMessages.forEach(deleteMsg);\n\n  function deleteMsg(val, key) {\n    val.delete();\n  }\n\n  clearMessages();\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: \"guilds\",\n      channels: 'channels',\n      messages: 'messages',\n      members: 'members'\n    };\n    globalPage = this;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Guilds, {\n      guilds: this.state.guilds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Channels, {\n      channels: this.state.channels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Members, {\n      members: this.state.members,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Guilds extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: this.props.guilds\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      guilds: props.guilds\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"guilds\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.guilds);\n  }\n\n}\n\nclass Channels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channels: this.props.channels\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      channels: props.channels\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.state.channels);\n  }\n\n}\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      messages: props.messages\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"messageButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"button\",\n      onClick: () => deleteMessages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"button\",\n      onClick: () => clearMessages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Clear Selection\")), this.state.messages);\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Members extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      members: this.props.members\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      members: props.members\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"members\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, this.state.members);\n  }\n\n}\n\nReactDOM.render(React.createElement(Page, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 259\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/chand/Desktop/electron-discord/src/index.js"],"names":["React","ReactDOM","Discord","require","client","Client","auth","login","token","globalPage","on","console","log","user","tag","textChannels","channels","array","map","x","type","push","clickChannel","id","name","setState","guilds","clickGuild","iconURL","msg","messages","state","concat","createMessage","channel","i","length","key","props","forEach","val","fetchMessages","then","msgs","reverse","guild","nameColor","color","member","displayHexColor","messageText","cleanContent","match","newMessageText","slice","index","attachments","url","author","avatarURL","float","selectMessage","printMsg","displayName","createdAt","toLocaleString","selectedMessages","Map","set","clearMessages","printMessages","deleteMessages","deleteMsg","delete","Page","Component","constructor","members","render","showMessages","Guilds","componentWillReceiveProps","Channels","Messages","Members","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//const electron = window.require('electron');\n\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\n\n\nvar globalPage;\nclient.on('ready', () => {\n    console.log(`\\n\\n\\nLogged in as ${client.user.tag}!`);\n\n\n    let textChannels=[];\n    client.channels.array().map(x=>{\n\t\tif (x.type==='text'){\n   \t\t\ttextChannels.push(<div onClick={()=>clickChannel(x.id)}  className=\"channel\" key={x.id} name={x.name}>{x.name}</div>);\n   \t\t}\n   \t\treturn 0;\n\t});\n   \tglobalPage.setState({\n   \t\tguilds:client.guilds.array().map(x=>{\n   \t\t\treturn <img onClick={()=>clickGuild(x)} className=\"guildIcon\" src={x.iconURL} alt={x.name} key={x.id}/>\n   \t\t}),\n   \t\tchannels:textChannels,\n   \t});\n});\n\nclient.on('message', msg => {\n\tglobalPage.setState({\n\t\tmessages:globalPage.state.messages.concat(createMessage(msg)),\n\t});\n});\nclient.on('channelCreate',channel=>{\n\tglobalPage.setState({\n\t\tchannels:globalPage.state.channels.concat(<div onClick={()=>clickChannel(channel.id)}  className=\"channel\" key={channel.id} name={channel.name}>{channel.name}</div>),\n\t})\n})\n\nfunction clickChannel(channel){\n\tif (channel.type!=='text'){\n\t\treturn;\n\t}\n\t//console.log(globalPage.state.channels);\n\t//var messages;\n\n\tlet channels = globalPage.state.channels;\n\tconsole.log(channel.id);\n\tfor (var i=0;i<channels.length;i++){\n\t\tif (channels[i].key===channel.id){\n\t\t\tconsole.log(channels[i]);\n\t\t\tchannels[i]=<div className=\"selectedChannel\" key={channel.id}>{channel.name}</div>;\n\t\t}else{\n\t\t\tconsole.log(channels[i]);\n\t\t\tconsole.log(channels[i].props.name);\n\t\t\tconsole.log(channels[i].key);\n\t\t\tchannels[i]=<div onClick={()=>clickChannel(channels[i])}className=\"channel\" key={channels[i].key}>{channels[i].props.name}</div>;\n\t\t}\n\t}\n\n\tclient.channels.forEach((val, key)=>{\n\t\tconsole.log(val);\n\t\tconsole.log(key);\n\t})\n\n\tchannel.fetchMessages().then(msgs=>{\n\t\tglobalPage.setState({\n\t\t\tmessages:msgs.map(x=>{return createMessage(x)}).reverse(),\n\t\t})\n\t});\n}\nfunction clickGuild(guild){\n\tglobalPage.setState({\n\t\tchannels:guild.channels.map(x=>{\n\t\t\tif (x.type==='text'){\n\t   \t\t\treturn <div onClick={()=>clickChannel(x)} className=\"channel\" id=\"x.id\">{x.name}</div>\n\t   \t\t}\n\t   \t\treturn 0;\n\t\t})\n\t});\n}\nfunction createMessage(msg){\n\tvar nameColor={\n\t\tcolor:'white',\n\t\tcolor:msg.member.displayHexColor,\n\t}\n\t\n\tvar messageText=msg.cleanContent;\n\tlet match=messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n\tvar newMessageText;\n\twhile(match!=null){\n\t\tnewMessageText=<span>{newMessageText}{messageText.slice(0,match.index)}<b>{match[0].slice(2,-2)}</b></span>;\n\t\tmessageText=messageText.slice(match.index+match[0].length);\n\t\tmatch=messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n\t}\n\tnewMessageText=<span>{newMessageText}{messageText}</span>;\n\tmsg.attachments.forEach((val)=>{\n\t\tnewMessageText=<span><img src={val.url} alt=\"\" className=\"embededImage\"/>{newMessageText}</span>;\n\t})\n\n\treturn (<div className = \"message\" key={msg.id}>\n\t\t\t\t<img src={msg.author.avatarURL} alt=\"\" className=\"avatar\"/>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"messageAuthor\">\n\t\t\t\t\t\t<input style={{float:'right'}}type=\"checkbox\" onClick={()=>{selectMessage(msg)}}></input>\n\t\t\t\t\t\t<span style={{float:'right'}} onClick={()=>{printMsg(msg)}}>{msg.author.tag}</span>\n\t\t\t\t\t\t<span style={nameColor}>{msg.member.displayName}</span>\n\t\t\t\t\t\t<span className=\"dateTime\"> {msg.createdAt.toLocaleString()}</span> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"messageText\">{newMessageText}</div>\n\t\t\t\t</div>\n\t\t\t</div>)\n}\nlet selectedMessages= new Map();\nfunction selectMessage(msg){\n\tselectedMessages.set(msg.id,msg);\n}\nfunction clearMessages(){\n\tselectedMessages= new Map();\n}\nfunction printMessages(){\n\tselectedMessages.forEach(printMsg);\n}\nfunction printMsg(val){\n\tconsole.log(val);\n}\nfunction deleteMessages(){\n\tselectedMessages.forEach(deleteMsg);\n\tfunction deleteMsg(val, key){\n\t\tval.delete(); \n\t}\n\tclearMessages();\n}\nclass Page extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:\"guilds\",\n\t\t\tchannels:'channels',\n\t\t\tmessages:'messages',\n\t\t\tmembers:'members'\n\t\t}\n\t\tglobalPage=this;\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Guilds guilds={this.state.guilds}/>\n\t\t\t\t<Channels channels={this.state.channels}/>\n\t\t\t\t<Messages messages={this.state.messages}/>\n\t\t\t\t<Members members={this.state.members}/>\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Guilds extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:this.props.guilds,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tguilds:props.guilds,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"guilds\">\n\t\t\t\t{this.state.guilds}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Channels extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tchannels:this.props.channels,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tchannels:props.channels,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"channels\">\n\t\t\t\t{this.state.channels}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Messages extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmessages:this.props.messages,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmessages:props.messages\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"messages\">\n\t\t\t\t<div id=\"messageButtons\">\n\t\t\t\t\t<button type=\"button\" className=\"button\" onClick={()=>deleteMessages()}>Delete</button><button type=\"button\" className=\"button\" onClick={()=>clearMessages()}>Clear Selection</button>\n\t\t\t\t</div>\n\t\t\t\t{this.state.messages}\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Members extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmembers:this.props.members,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmembers:props.members\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"members\">\n\t\t\t\t{this.state.members}\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nReactDOM.render(\n\t<Page />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}