{"ast":null,"code":"/**\n * A base class for different types of rate limiting handlers for the REST API.\n * @private\n */\nclass RequestHandler {\n  /**\n   * @param {RESTManager} restManager The REST manager to use\n   */\n  constructor(restManager) {\n    /**\n     * The RESTManager that instantiated this RequestHandler\n     * @type {RESTManager}\n     */\n    this.restManager = restManager;\n    /**\n     * A list of requests that have yet to be processed\n     * @type {APIRequest[]}\n     */\n\n    this.queue = [];\n  }\n  /**\n   * Whether or not the client is being rate limited on every endpoint\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get globalLimit() {\n    return this.restManager.globallyRateLimited;\n  }\n\n  set globalLimit(value) {\n    this.restManager.globallyRateLimited = value;\n  }\n  /**\n   * Push a new API request into this bucket.\n   * @param {APIRequest} request The new request to push into the queue\n   */\n\n\n  push(request) {\n    this.queue.push(request);\n  }\n  /**\n   * Attempts to get this RequestHandler to process its current queue.\n   */\n\n\n  handle() {} // eslint-disable-line no-empty-function\n\n\n  destroy() {\n    this.queue = [];\n  }\n\n}\n\nmodule.exports = RequestHandler;","map":null,"metadata":{},"sourceType":"script"}