{"ast":null,"code":"const Action = require('./Action');\n\nconst Constants = require('../../util/Constants');\n\nclass GuildMemberRemoveAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    let member = null;\n\n    if (guild) {\n      member = guild.members.get(data.user.id);\n      guild.memberCount--;\n\n      if (member) {\n        guild._removeMember(member);\n\n        this.deleted.set(guild.id + data.user.id, member);\n        if (client.status === Constants.Status.READY) client.emit(Constants.Events.GUILD_MEMBER_REMOVE, member);\n        this.scheduleForDeletion(guild.id, data.user.id);\n      } else {\n        member = this.deleted.get(guild.id + data.user.id) || null;\n      }\n\n      if (member) member.deleted = true;\n    }\n\n    return {\n      guild,\n      member\n    };\n  }\n\n  scheduleForDeletion(guildID, userID) {\n    this.client.setTimeout(() => this.deleted.delete(guildID + userID), this.client.options.restWsBridgeTimeout);\n  }\n\n}\n/**\n * Emitted whenever a member leaves a guild, or is kicked.\n * @event Client#guildMemberRemove\n * @param {GuildMember} member The member that has left/been kicked from the guild\n */\n\n\nmodule.exports = GuildMemberRemoveAction;","map":null,"metadata":{},"sourceType":"script"}