{"ast":null,"code":"const AbstractHandler = require('./AbstractHandler');\n\nconst ClientUser = require('../../../../structures/ClientUser');\n\nclass ReadyHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.ws.heartbeat();\n    data.user.user_settings = data.user_settings;\n    data.user.user_guild_settings = data.user_guild_settings;\n    const clientUser = new ClientUser(client, data.user);\n    client.user = clientUser;\n    client.readyAt = new Date();\n    client.users.set(clientUser.id, clientUser);\n\n    for (const guild of data.guilds) if (!client.guilds.has(guild.id)) client.dataManager.newGuild(guild);\n\n    for (const privateDM of data.private_channels) client.dataManager.newChannel(privateDM);\n\n    for (const relation of data.relationships) {\n      const user = client.dataManager.newUser(relation.user);\n\n      if (relation.type === 1) {\n        client.user.friends.set(user.id, user);\n      } else if (relation.type === 2) {\n        client.user.blocked.set(user.id, user);\n      }\n    }\n\n    data.presences = data.presences || [];\n\n    for (const presence of data.presences) {\n      client.dataManager.newUser(presence.user);\n\n      client._setPresence(presence.user.id, presence);\n    }\n\n    if (data.notes) {\n      for (const user in data.notes) {\n        let note = data.notes[user];\n        if (!note.length) note = null;\n        client.user.notes.set(user, note);\n      }\n    }\n\n    if (!client.user.bot && client.options.sync) client.setInterval(client.syncGuilds.bind(client), 30000);\n\n    if (!client.users.has('1')) {\n      client.dataManager.newUser({\n        id: '1',\n        username: 'Clyde',\n        discriminator: '0000',\n        avatar: 'https://discordapp.com/assets/f78426a064bc9dd24847519259bc42af.png',\n        bot: true,\n        status: 'online',\n        game: null,\n        verified: true\n      });\n    }\n\n    const t = client.setTimeout(() => {\n      client.ws.connection.triggerReady();\n    }, 1200 * data.guilds.length);\n    client.setMaxListeners(data.guilds.length + 10);\n    client.once('ready', () => {\n      client.syncGuilds();\n      client.setMaxListeners(10);\n      client.clearTimeout(t);\n    });\n    const ws = this.packetManager.ws;\n    ws.sessionID = data.session_id;\n    ws._trace = data._trace;\n    client.emit('debug', \"READY \".concat(ws._trace.join(' -> '), \" \").concat(ws.sessionID));\n    ws.checkIfReady();\n  }\n\n}\n\nmodule.exports = ReadyHandler;","map":null,"metadata":{},"sourceType":"script"}