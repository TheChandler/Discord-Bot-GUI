{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\chand\\\\Desktop\\\\electron-discord\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nconst _require = require('../util/Constants'),\n      ActivityFlags = _require.ActivityFlags,\n      Endpoints = _require.Endpoints;\n/**\n * The status of this presence:\n *\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\n\n\nclass Presence {\n  constructor(data = {}, client) {\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The status of this presence:\n     * @type {PresenceStatus}\n     */\n\n    this.status = data.status || 'offline';\n    /**\n     * The game that the user is playing\n     * @type {?Game}\n     */\n\n    this.game = data.game ? new Game(data.game, this) : null;\n    /**\n     * The devices this presence is on\n     * @type {?object}\n     * @property {PresenceStatus} web\n     * @property {PresenceStatus} mobile\n     * @property {PresenceStatus} desktop\n     */\n\n    this.clientStatus = data.client_status || null;\n  }\n\n  update(data) {\n    this.status = data.status || this.status;\n    this.game = data.game ? new Game(data.game, this) : null;\n    this.clientStatus = data.client_status || null;\n  }\n  /**\n   * Whether this presence is equal to another\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(presence) {\n    return this === presence || presence && this.status === presence.status && (this.game ? this.game.equals(presence.game) : !presence.game) && this.clientStatus.web === presence.clientStatus.web && this.clientStatus.mobile === presence.clientStatus.mobile && this.clientStatus.desktop === presence.clientStatus.desktop;\n  }\n\n}\n/**\n * Represents a game that is part of a user's presence.\n */\n\n\nclass Game {\n  constructor(data, presence) {\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n    /**\n     * The name of the game being played\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The type of the game status, its possible values:\n     * - 0: Playing\n     * - 1: Streaming\n     * - 2: Listening\n     * - 3: Watching\n     * @type {number}\n     */\n\n    this.type = data.type;\n    /**\n     * If the game is being streamed, a link to the stream\n     * @type {?string}\n     */\n\n    this.url = data.url || null;\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n\n    this.details = data.details || null;\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n\n    this.state = data.state || null;\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n\n    this.applicationID = data.application_id || null;\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @prop {?Date} start When the activity started\n     * @prop {?Date} end When the activity will end\n     */\n\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @prop {?string} id ID of the party\n     * @prop {number[]} size Size of the party as `[current, max]`\n     */\n\n    this.party = data.party || null;\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n    this.syncID = data.sync_id;\n    this._flags = data.flags;\n  }\n\n  get flags() {\n    const flags = [];\n\n    for (const _ref of Object.entries(ActivityFlags)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const name = _ref2[0];\n      const flag = _ref2[1];\n      if ((this._flags & flag) === flag) flags.push(name);\n    }\n\n    return flags;\n  }\n  /**\n   * Whether or not the game is being streamed\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get streaming() {\n    return this.type === 1;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the game's name instead of the Game object.\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.name;\n  }\n  /**\n   * Whether this game is equal to another game\n   * @param {Game} game The game to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(game) {\n    return this === game || game && this.name === game.name && this.type === game.type && this.url === game.url;\n  }\n\n}\n/**\n * Assets for a rich presence\n */\n\n\nclass RichPresenceAssets {\n  constructor(game, assets) {\n    Object.defineProperty(this, 'game', {\n      value: game\n    });\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n\n    this.largeText = assets.large_text || null;\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n\n    this.smallText = assets.small_text || null;\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n\n    this.largeImage = assets.large_image || null;\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n\n    this.smallImage = assets.small_image || null;\n  }\n  /**\n   * The URL of the small image asset\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get smallImageURL() {\n    if (!this.smallImage) return null;\n    return Endpoints.CDN(this.game.presence.client.options.http.cdn).AppAsset(this.game.applicationID, this.smallImage);\n  }\n  /**\n   * The URL of the large image asset\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get largeImageURL() {\n    if (!this.largeImage) return null;\n\n    if (/^spotify:/.test(this.largeImage)) {\n      return \"https://i.scdn.co/image/\".concat(this.largeImage.slice(8));\n    }\n\n    return Endpoints.CDN(this.game.presence.client.options.http.cdn).AppAsset(this.game.applicationID, this.largeImage);\n  }\n\n}\n\nexports.Presence = Presence;\nexports.Game = Game;\nexports.RichPresenceAssets = RichPresenceAssets;","map":null,"metadata":{},"sourceType":"script"}