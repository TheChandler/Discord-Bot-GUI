{"ast":null,"code":"const Webhook = require('../structures/Webhook');\n\nconst RESTManager = require('./rest/RESTManager');\n\nconst ClientDataResolver = require('./ClientDataResolver');\n\nconst Constants = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * The webhook client.\n * @extends {Webhook}\n */\n\n\nclass WebhookClient extends Webhook {\n  /**\n   * @param {Snowflake} id ID of the webhook\n   * @param {string} token Token of the webhook\n   * @param {ClientOptions} [options] Options for the client\n   * @example\n   * // Create a new webhook and send a message\n   * const hook = new Discord.WebhookClient('1234', 'abcdef');\n   * hook.sendMessage('This will send a message').catch(console.error);\n   */\n  constructor(id, token, options) {\n    super(null, id, token);\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n\n    this.options = Util.mergeDefault(Constants.DefaultOptions, options);\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n\n    this.rest = new RESTManager(this);\n    /**\n     * The data resolver of the client\n     * @type {ClientDataResolver}\n     * @private\n     */\n\n    this.resolver = new ClientDataResolver(this);\n    /**\n     * Timeouts set by {@link WebhookClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    this._timeouts = new Set();\n    /**\n     * Intervals set by {@link WebhookClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    this._intervals = new Set();\n  }\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n\n\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn(...args);\n\n      this._timeouts.delete(timeout);\n    }, delay);\n\n    this._timeouts.add(timeout);\n\n    return timeout;\n  }\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n\n\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n\n    this._timeouts.delete(timeout);\n  }\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n\n\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n\n    this._intervals.add(interval);\n\n    return interval;\n  }\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n\n\n  clearInterval(interval) {\n    clearInterval(interval);\n\n    this._intervals.delete(interval);\n  }\n  /**\n   * Destroys the client.\n   */\n\n\n  destroy() {\n    for (const t of this._timeouts) clearTimeout(t);\n\n    for (const i of this._intervals) clearInterval(i);\n\n    this._timeouts.clear();\n\n    this._intervals.clear();\n  }\n\n}\n\nmodule.exports = WebhookClient;","map":null,"metadata":{},"sourceType":"script"}