{"ast":null,"code":"const Constants = require('../util/Constants');\n\nconst Collection = require('../util/Collection');\n\nconst ClientUserChannelOverride = require('./ClientUserChannelOverride');\n/**\n * A wrapper around the ClientUser's guild settings.\n */\n\n\nclass ClientUserGuildSettings {\n  constructor(data, client) {\n    /**\n     * The client that created the instance of the ClientUserGuildSettings\n     * @name ClientUserGuildSettings#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The ID of the guild this settings are for\n     * @type {Snowflake}\n     */\n\n    this.guildID = data.guild_id;\n    this.channelOverrides = new Collection();\n    this.patch(data);\n  }\n  /**\n   * Patch the data contained in this class with new partial data.\n   * @param {Object} data Data to patch this with\n   * @returns {void}\n   * @private\n   */\n\n\n  patch(data) {\n    for (const key of Object.keys(Constants.UserGuildSettingsMap)) {\n      const value = Constants.UserGuildSettingsMap[key];\n      if (!data.hasOwnProperty(key)) continue;\n\n      if (key === 'channel_overrides') {\n        for (const channel of data[key]) {\n          this.channelOverrides.set(channel.channel_id, new ClientUserChannelOverride(channel));\n        }\n      } else if (typeof value === 'function') {\n        this[value.name] = value(data[key]);\n      } else {\n        this[value] = data[key];\n      }\n    }\n  }\n  /**\n   * Update a specific property of the guild settings.\n   * @param {string} name Name of property\n   * @param {value} value Value to patch\n   * @returns {Promise<Object>}\n   */\n\n\n  update(name, value) {\n    return this.client.rest.methods.patchClientUserGuildSettings(this.guildID, {\n      [name]: value\n    });\n  }\n\n}\n\nmodule.exports = ClientUserGuildSettings;","map":null,"metadata":{},"sourceType":"script"}