{"ast":null,"code":"const AbstractHandler = require('./AbstractHandler');\n\nconst Constants = require('../../../../util/Constants');\n\nconst Util = require('../../../../util/Util');\n\nclass PresenceUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    let user = client.users.get(data.user.id);\n    const guild = client.guilds.get(data.guild_id); // Step 1\n\n    if (!user) {\n      if (data.user.username) {\n        user = client.dataManager.newUser(data.user);\n      } else {\n        return;\n      }\n    }\n\n    const oldUser = Util.cloneObject(user);\n    user.patch(data.user);\n\n    if (!user.equals(oldUser)) {\n      client.emit(Constants.Events.USER_UPDATE, oldUser, user);\n    }\n\n    if (guild) {\n      let member = guild.members.get(user.id);\n\n      if (!member && data.status !== 'offline') {\n        member = guild._addMember({\n          user,\n          roles: data.roles,\n          deaf: false,\n          mute: false\n        }, false);\n        client.emit(Constants.Events.GUILD_MEMBER_AVAILABLE, member);\n      }\n\n      if (member) {\n        if (client.listenerCount(Constants.Events.PRESENCE_UPDATE) === 0) {\n          guild._setPresence(user.id, data);\n\n          return;\n        }\n\n        const oldMember = Util.cloneObject(member);\n\n        if (member.presence) {\n          oldMember.frozenPresence = Util.cloneObject(member.presence);\n        }\n\n        guild._setPresence(user.id, data);\n\n        client.emit(Constants.Events.PRESENCE_UPDATE, oldMember, member);\n      } else {\n        guild._setPresence(user.id, data);\n      }\n    }\n  }\n\n}\n/**\n * Emitted whenever a guild member's presence changes, or they change one of their details.\n * @event Client#presenceUpdate\n * @param {GuildMember} oldMember The member before the presence update\n * @param {GuildMember} newMember The member after the presence update\n */\n\n/**\n * Emitted whenever a user's details (e.g. username) are changed.\n * @event Client#userUpdate\n * @param {User} oldUser The user before the update\n * @param {User} newUser The user after the update\n */\n\n/**\n * Emitted whenever a member becomes available in a large guild.\n * @event Client#guildMemberAvailable\n * @param {GuildMember} member The member that became available\n */\n\n\nmodule.exports = PresenceUpdateHandler;","map":null,"metadata":{},"sourceType":"script"}