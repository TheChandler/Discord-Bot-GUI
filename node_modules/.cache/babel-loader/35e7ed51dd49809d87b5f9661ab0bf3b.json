{"ast":null,"code":"const Attachment = require('./Attachment');\n\nconst MessageEmbed = require('./MessageEmbed');\n\nlet ClientDataResolver;\n/**\n * A rich embed to be sent with a message with a fluent interface for creation.\n * @param {Object} [data] Data to set in the rich embed\n */\n\nclass RichEmbed {\n  constructor(data = {}) {\n    /**\n     * Title for this Embed\n     * @type {string}\n     */\n    this.title = data.title;\n    /**\n     * Description for this Embed\n     * @type {string}\n     */\n\n    this.description = data.description;\n    /**\n     * URL for this Embed\n     * @type {string}\n     */\n\n    this.url = data.url;\n    /**\n     * Color for this Embed\n     * @type {number}\n     */\n\n    this.color = data.color;\n    /**\n     * Author for this Embed\n     * @type {Object}\n     */\n\n    this.author = data.author;\n    /**\n     * Timestamp for this Embed\n     * @type {Date}\n     */\n\n    this.timestamp = data.timestamp;\n    /**\n     * Fields for this Embed\n     * @type {Object[]}\n     */\n\n    this.fields = data.fields || [];\n    /**\n     * Thumbnail for this Embed\n     * @type {Object}\n     */\n\n    this.thumbnail = data.thumbnail;\n    /**\n     * Image for this Embed\n     * @type {Object}\n     */\n\n    this.image = data.image;\n    /**\n     * Footer for this Embed\n     * @type {Object}\n     */\n\n    this.footer = data.footer;\n    /**\n     * File to upload alongside this Embed\n     * @type {FileOptions|string|Attachment}\n     */\n\n    this.file = data.file;\n    /**\n     * The files to upload alongside this Embed\n     * @type {Array<FileOptions|string|Attachment>}\n     */\n\n    this.files = [];\n  }\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setTitle(title) {\n    title = resolveString(title);\n    if (title.length > 256) throw new RangeError('RichEmbed titles may not exceed 256 characters.');\n    this.title = title;\n    return this;\n  }\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setDescription(description) {\n    description = resolveString(description);\n    if (description.length > 2048) throw new RangeError('RichEmbed descriptions may not exceed 2048 characters.');\n    this.description = description;\n    return this;\n  }\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setColor(color) {\n    if (!ClientDataResolver) ClientDataResolver = require('../client/ClientDataResolver');\n    this.color = ClientDataResolver.resolveColor(color);\n    return this;\n  }\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [icon] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setAuthor(name, icon, url) {\n    this.author = {\n      name: resolveString(name),\n      icon_url: icon,\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setTimestamp(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {RichEmbed} This embed\n   */\n\n\n  addField(name, value, inline = false) {\n    if (this.fields.length >= 25) throw new RangeError('RichEmbeds may not exceed 25 fields.');\n    name = resolveString(name);\n    if (name.length > 256) throw new RangeError('RichEmbed field names may not exceed 256 characters.');\n    if (!/\\S/.test(name)) throw new RangeError('RichEmbed field names may not be empty.');\n    value = resolveString(value);\n    if (value.length > 1024) throw new RangeError('RichEmbed field values may not exceed 1024 characters.');\n    if (!/\\S/.test(value)) throw new RangeError('RichEmbed field values may not be empty.');\n    this.fields.push({\n      name,\n      value,\n      inline\n    });\n    return this;\n  }\n  /**\n   * Convenience function for `<RichEmbed>.addField('\\u200B', '\\u200B', inline)`.\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {RichEmbed} This embed\n   */\n\n\n  addBlankField(inline = false) {\n    return this.addField('\\u200B', '\\u200B', inline);\n  }\n  /**\n   * Set the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setThumbnail(url) {\n    this.thumbnail = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Set the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setImage(url) {\n    this.image = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [icon] The icon URL of the footer\n   * @returns {RichEmbed} This embed\n   */\n\n\n  setFooter(text, icon) {\n    text = resolveString(text);\n    if (text.length > 2048) throw new RangeError('RichEmbed footer text may not exceed 2048 characters.');\n    this.footer = {\n      text,\n      icon_url: icon\n    };\n    return this;\n  }\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Only one file may be attached.\n   * @param {FileOptions|string|Attachment} file Local path or URL to the file to attach,\n   * or valid FileOptions for a file to attach\n   * @returns {RichEmbed} This embed\n   */\n\n\n  attachFile(file) {\n    if (this.file) throw new RangeError('You may not upload more than one file at once.');\n    if (file instanceof Attachment) file = file.file;\n    this.file = file;\n    return this;\n  }\n  /**\n   * Sets the files to upload alongside the embed. A file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|Attachment>} files Files to attach\n   * @returns {RichEmbed}\n   */\n\n\n  attachFiles(files) {\n    files = files.map(file => file instanceof Attachment ? file.file : file);\n    this.files = this.files.concat(files);\n    return this;\n  }\n  /**\n   * The accumulated length for the embed title, description, fields, author and footer text\n   * @type {number}\n   * @readonly\n   */\n\n\n  get length() {\n    return (this.title ? this.title.length : 0) + (this.description ? this.description.length : 0) + (this.fields.length >= 1 ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) : 0) + (this.footer ? this.footer.text.length : 0) + (this.author ? this.author.name.length : 0);\n  }\n  /**\n   * Transforms the embed object to be processed.\n   * @returns {Object} The raw data of this embed\n   * @private\n   */\n\n\n  _apiTransform() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields ? this.fields.map(field => ({\n        name: field.name,\n        value: field.value,\n        inline: field.inline\n      })) : null,\n      thumbnail: this.thumbnail ? {\n        url: this.thumbnail.url\n      } : null,\n      image: this.image ? {\n        url: this.image.url\n      } : null,\n      author: this.author ? {\n        name: this.author.name,\n        url: this.author.url,\n        icon_url: this.author instanceof MessageEmbed.Author ? this.author.iconURL : this.author.icon_url\n      } : null,\n      footer: this.footer ? {\n        text: this.footer.text,\n        icon_url: this.footer instanceof MessageEmbed.Footer ? this.footer.iconURL : this.footer.icon_url\n      } : null\n    };\n  }\n\n}\n\nmodule.exports = RichEmbed;\n\nfunction resolveString(data) {\n  if (typeof data === 'string') return data;\n  if (data instanceof Array) return data.join('\\n');\n  return String(data);\n}","map":null,"metadata":{},"sourceType":"script"}