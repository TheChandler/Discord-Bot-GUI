{"ast":null,"code":"const Permissions = require('../util/Permissions');\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\n\n\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', {\n      value: guildChannel\n    });\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The type of this overwrite\n     * @type {string}\n     */\n\n    this.type = data.type;\n    /**\n     * The permissions that are denied for the user or role as a bitfield.\n     * @type {number}\n     */\n\n    this.deny = data.deny;\n    /**\n     * The permissions that are allowed for the user or role as a bitfield.\n     * @type {number}\n     */\n\n    this.allow = data.allow;\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Permissions}\n     * @deprecated\n     */\n\n    this.denied = new Permissions(data.deny).freeze();\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Permissions}\n     * @deprecated\n     */\n\n    this.allowed = new Permissions(data.allow).freeze();\n  }\n  /**\n   * Delete this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n\n\n  delete(reason) {\n    return this.channel.client.rest.methods.deletePermissionOverwrites(this, reason);\n  }\n\n}\n\nmodule.exports = PermissionOverwrites;","map":null,"metadata":{},"sourceType":"script"}