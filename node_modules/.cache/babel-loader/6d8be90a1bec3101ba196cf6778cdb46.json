{"ast":null,"code":"const UserAgentManager = require('./UserAgentManager');\n\nconst RESTMethods = require('./RESTMethods');\n\nconst SequentialRequestHandler = require('./RequestHandlers/Sequential');\n\nconst BurstRequestHandler = require('./RequestHandlers/Burst');\n\nconst APIRequest = require('./APIRequest');\n\nconst Constants = require('../../util/Constants');\n\nclass RESTManager {\n  constructor(client) {\n    this.client = client;\n    this.handlers = {};\n    this.userAgentManager = new UserAgentManager(this);\n    this.methods = new RESTMethods(this);\n    this.rateLimitedEndpoints = {};\n    this.globallyRateLimited = false;\n  }\n\n  destroy() {\n    for (const handlerKey of Object.keys(this.handlers)) {\n      const handler = this.handlers[handlerKey];\n      if (handler.destroy) handler.destroy();\n    }\n  }\n\n  push(handler, apiRequest) {\n    return new Promise((resolve, reject) => {\n      handler.push({\n        request: apiRequest,\n        resolve,\n        reject,\n        retries: 0\n      });\n    });\n  }\n\n  getRequestHandler() {\n    switch (this.client.options.apiRequestMethod) {\n      case 'sequential':\n        return SequentialRequestHandler;\n\n      case 'burst':\n        return BurstRequestHandler;\n\n      default:\n        throw new Error(Constants.Errors.INVALID_RATE_LIMIT_METHOD);\n    }\n  }\n\n  makeRequest(method, url, auth, data, file, reason) {\n    const apiRequest = new APIRequest(this, method, url, auth, data, file, reason);\n\n    if (!this.handlers[apiRequest.route]) {\n      const RequestHandlerType = this.getRequestHandler();\n      this.handlers[apiRequest.route] = new RequestHandlerType(this, apiRequest.route);\n    }\n\n    return this.push(this.handlers[apiRequest.route], apiRequest);\n  }\n\n}\n\nmodule.exports = RESTManager;","map":null,"metadata":{},"sourceType":"script"}