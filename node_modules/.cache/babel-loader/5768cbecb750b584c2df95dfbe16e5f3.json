{"ast":null,"code":"const GuildChannel = require('./GuildChannel');\n\nconst Collection = require('../util/Collection');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents a guild voice channel on Discord.\n * @extends {GuildChannel}\n */\n\n\nclass VoiceChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * The members in this voice channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n\n    this.members = new Collection();\n    this.type = 'voice';\n  }\n\n  setup(data) {\n    super.setup(data);\n    /**\n     * The bitrate of this voice channel\n     * @type {number}\n     */\n\n    this.bitrate = data.bitrate * 0.001;\n    /**\n     * The maximum amount of users allowed in this channel - 0 means unlimited.\n     * @type {number}\n     */\n\n    this.userLimit = data.user_limit;\n  }\n  /**\n   * The voice connection for this voice channel, if the client is connected\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n\n\n  get connection() {\n    const connection = this.guild.voiceConnection;\n    if (connection && connection.channel.id === this.id) return connection;\n    return null;\n  }\n  /**\n   * Checks if the voice channel is full\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get deletable() {\n    return super.deletable && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT);\n  }\n  /**\n   * Checks if the client has permission join the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get joinable() {\n    if (this.client.browser) return false;\n    if (!this.permissionsFor(this.client.user).has('CONNECT')) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has('MOVE_MEMBERS')) return false;\n    return true;\n  }\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get speakable() {\n    return this.permissionsFor(this.client.user).has('SPEAK');\n  }\n  /**\n   * Sets the bitrate of the channel (in kbps).\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}kbps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setBitrate(bitrate, reason) {\n    bitrate *= 1000;\n    return this.edit({\n      bitrate\n    }, reason);\n  }\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n\n\n  setUserLimit(userLimit, reason) {\n    return this.edit({\n      userLimit\n    }, reason);\n  }\n  /**\n   * Attempts to join this voice channel.\n   * @returns {Promise<VoiceConnection>}\n   * @example\n   * // Join a voice channel\n   * voiceChannel.join()\n   *   .then(connection => console.log('Connected!'))\n   *   .catch(console.error);\n   */\n\n\n  join() {\n    if (this.client.browser) return Promise.reject(new Error('Voice connections are not available in browsers.'));\n    return this.client.voice.joinChannel(this);\n  }\n  /**\n   * Leaves this voice channel.\n   * @example\n   * // Leave a voice channel\n   * voiceChannel.leave();\n   */\n\n\n  leave() {\n    if (this.client.browser) return;\n    const connection = this.client.voice.connections.get(this.guild.id);\n    if (connection && connection.channel.id === this.id) connection.disconnect();\n  }\n\n}\n\nmodule.exports = VoiceChannel;","map":null,"metadata":{},"sourceType":"script"}