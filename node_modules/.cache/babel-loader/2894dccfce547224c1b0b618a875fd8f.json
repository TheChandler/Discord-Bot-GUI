{"ast":null,"code":"const Collection = require('../util/Collection');\n\nconst Snowflake = require('../util/Snowflake');\n\nconst Webhook = require('./Webhook');\n\nconst Invite = require('./Invite');\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {AuditLogTargetType}\n */\n\n\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE'\n};\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {AuditLogAction}\n */\n\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72\n};\n/**\n * Audit logs entries are held in this class.\n */\n\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.dataManager.newUser(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n\n    this.webhooks = new Collection();\n\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n\n\n    this.entries = new Collection();\n\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n\n\n  static build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|Emoji|Invite|Webhook} AuditLogEntryTarget\n   */\n\n  /**\n   * Find target type from entry action.\n   * @param {number} target The action target\n   * @returns {?string}\n   */\n\n\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    return null;\n  }\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n\n\n  static actionType(action) {\n    if ([Actions.CHANNEL_CREATE, Actions.CHANNEL_OVERWRITE_CREATE, Actions.MEMBER_BAN_REMOVE, Actions.ROLE_CREATE, Actions.INVITE_CREATE, Actions.WEBHOOK_CREATE, Actions.EMOJI_CREATE].includes(action)) return 'CREATE';\n    if ([Actions.CHANNEL_DELETE, Actions.CHANNEL_OVERWRITE_DELETE, Actions.MEMBER_KICK, Actions.MEMBER_PRUNE, Actions.MEMBER_BAN_ADD, Actions.ROLE_DELETE, Actions.INVITE_DELETE, Actions.WEBHOOK_DELETE, Actions.EMOJI_DELETE, Actions.MESSAGE_DELETE].includes(action)) return 'DELETE';\n    if ([Actions.GUILD_UPDATE, Actions.CHANNEL_UPDATE, Actions.CHANNEL_OVERWRITE_UPDATE, Actions.MEMBER_UPDATE, Actions.MEMBER_ROLE_UPDATE, Actions.ROLE_UPDATE, Actions.INVITE_UPDATE, Actions.WEBHOOK_UPDATE, Actions.EMOJI_UPDATE].includes(action)) return 'UPDATE';\n    return 'ALL';\n  }\n\n}\n/**\n * Audit logs entry.\n */\n\n\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n\n    this.targetType = targetType;\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n    /**\n     * Specific action type of this entry in its string representation\n     * @type {AuditLogAction}\n     */\n\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n\n    this.reason = data.reason || null;\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n\n    this.executor = guild.client.users.get(data.user_id);\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n\n    this.changes = data.changes ? data.changes.map(c => ({\n      key: c.key,\n      old: c.old_value,\n      new: c.new_value\n    })) : null;\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n\n    this.extra = null;\n\n    if (data.options) {\n      if (data.action_type === Actions.MEMBER_PRUNE) {\n        this.extra = {\n          removed: data.options.members_removed,\n          days: data.options.delete_member_days\n        };\n      } else if (data.action_type === Actions.MESSAGE_DELETE) {\n        this.extra = {\n          count: data.options.count,\n          channel: guild.channels.get(data.options.channel_id)\n        };\n      } else {\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.get(data.options.id);\n            if (!this.extra) this.extra = {\n              id: data.options.id\n            };\n            break;\n\n          case 'role':\n            this.extra = guild.roles.get(data.options.id);\n            if (!this.extra) this.extra = {\n              id: data.options.id,\n              name: data.options.role_name\n            };\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n\n    if ([Targets.USER, Targets.GUILD].includes(targetType)) {\n      /**\n       * The target of this entry\n       * @type {AuditLogEntryTarget}\n       */\n      this.target = guild.client[\"\".concat(targetType.toLowerCase(), \"s\")].get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target = logs.webhooks.get(data.target_id) || new Webhook(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.INVITE) {\n      const changes = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild\n      });\n      changes.channel = {\n        id: changes.channel_id\n      };\n      this.target = new Invite(guild.client, changes);\n    } else if (targetType === Targets.MESSAGE) {\n      this.target = guild.client.users.get(data.target_id);\n    } else {\n      this.target = guild[\"\".concat(targetType.toLowerCase(), \"s\")].get(data.target_id);\n    }\n  }\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this entry was created\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\nmodule.exports = GuildAuditLogs;","map":null,"metadata":{},"sourceType":"script"}