{"ast":null,"code":"const AbstractHandler = require('./AbstractHandler');\n\nconst Constants = require('../../../../util/Constants');\n/*\n{ t: 'CHANNEL_PINS_UPDATE',\n  s: 666,\n  op: 0,\n  d:\n   { last_pin_timestamp: '2016-08-28T17:37:13.171774+00:00',\n     channel_id: '314866471639044027' } }\n*/\n\n\nclass ChannelPinsUpdate extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const channel = client.channels.get(data.channel_id);\n    const time = new Date(data.last_pin_timestamp);\n\n    if (channel && time) {\n      // Discord sends null for last_pin_timestamp if the last pinned message was removed\n      channel.lastPinTimestamp = time.getTime() || null;\n      client.emit(Constants.Events.CHANNEL_PINS_UPDATE, channel, time);\n    }\n  }\n\n}\n/**\n * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event, not much information\n * can be provided easily here - you need to manually check the pins yourself.\n * <warn>The `time` parameter will be a Unix Epoch Date object when there are no pins left.</warn>\n * @event Client#channelPinsUpdate\n * @param {Channel} channel The channel that the pins update occured in\n * @param {Date} time The time when the last pinned message was pinned\n */\n\n\nmodule.exports = ChannelPinsUpdate;","map":null,"metadata":{},"sourceType":"script"}