{"ast":null,"code":"const Snowflake = require('../util/Snowflake');\n/**\n * Represents any channel on Discord.\n */\n\n\nclass Channel {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the Channel\n     * @name Channel#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `group` - a Group DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * * `news` - a guild news channel\n     * * `store` - a guild store channel\n     * @type {string}\n     */\n\n    this.type = null;\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The unique ID of the channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the channel was created\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Deletes the channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  delete() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n\n}\n\nmodule.exports = Channel;","map":null,"metadata":{},"sourceType":"script"}