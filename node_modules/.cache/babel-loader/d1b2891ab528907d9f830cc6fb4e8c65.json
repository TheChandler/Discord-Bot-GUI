{"ast":null,"code":"const Snowflake = require('../util/Snowflake');\n\nconst util = require('util');\n/**\n * Represents an OAuth2 Application.\n */\n\n\nclass OAuth2Application {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the application\n     * @name OAuth2Application#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The name of the app\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The app's description\n     * @type {string}\n     */\n\n    this.description = data.description;\n    /**\n     * The app's icon hash\n     * @type {?string}\n     */\n\n    this.icon = data.icon;\n    /**\n     * The app's icon URL\n     * @type {string}\n     */\n\n    this.iconURL = \"https://cdn.discordapp.com/app-icons/\".concat(this.id, \"/\").concat(this.icon, \".jpg\");\n    /**\n     * The app's RPC origins\n     * @type {?string[]}\n     */\n\n    this.rpcOrigins = data.rpc_origins;\n    /**\n     * The app's redirect URIs\n     * @type {string[]}\n     */\n\n    this.redirectURIs = data.redirect_uris;\n    /**\n     * If this app's bot requires a code grant when using the OAuth2 flow\n     * @type {boolean}\n     */\n\n    this.botRequireCodeGrant = data.bot_require_code_grant;\n    /**\n     * If this app's bot is public\n     * @type {boolean}\n     */\n\n    this.botPublic = data.bot_public;\n    /**\n     * If this app can use rpc\n     * @type {boolean}\n     */\n\n    this.rpcApplicationState = data.rpc_application_state;\n    /**\n     * Object containing basic info about this app's bot\n     * @type {Object}\n     */\n\n    this.bot = data.bot;\n    /**\n     * The flags for the app\n     * @type {number}\n     */\n\n    this.flags = data.flags;\n    /**\n     * OAuth2 secret for the application\n     * @type {boolean}\n     */\n\n    this.secret = data.secret;\n\n    if (data.owner) {\n      /**\n       * The owner of this OAuth application\n       * @type {?User}\n       */\n      this.owner = this.client.dataManager.newUser(data.owner);\n    }\n  }\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the app was created\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Reset the app's secret and bot token.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {OAuth2Application}\n   * @deprecated\n   */\n\n\n  reset() {\n    return this.client.rest.methods.resetApplication(this.id);\n  }\n  /**\n   * When concatenated with a string, this automatically concatenates the app name rather than the app object.\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n}\n\nOAuth2Application.prototype.reset = util.deprecate(OAuth2Application.prototype.reset, 'OAuth2Application#reset: userbot methods will be removed');\nmodule.exports = OAuth2Application;","map":null,"metadata":{},"sourceType":"script"}