{"ast":null,"code":"const Constants = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * A wrapper around the ClientUser's settings.\n */\n\n\nclass ClientUserSettings {\n  constructor(user, data) {\n    this.user = user;\n    this.patch(data);\n  }\n  /**\n   * Patch the data contained in this class with new partial data.\n   * @param {Object} data Data to patch this with\n   * @returns {void}\n   * @private\n   */\n\n\n  patch(data) {\n    for (const key of Object.keys(Constants.UserSettingsMap)) {\n      const value = Constants.UserSettingsMap[key];\n      if (!data.hasOwnProperty(key)) continue;\n\n      if (typeof value === 'function') {\n        this[value.name] = value(data[key]);\n      } else {\n        this[value] = data[key];\n      }\n    }\n  }\n  /**\n   * Update a specific property of of user settings.\n   * @param {string} name Name of property\n   * @param {*} value Value to patch\n   * @returns {Promise<Object>}\n   */\n\n\n  update(name, value) {\n    return this.user.client.rest.methods.patchUserSettings({\n      [name]: value\n    });\n  }\n  /**\n   * Sets the position at which this guild will appear in the Discord client.\n   * @param {Guild} guild The guild to move\n   * @param {number} position Absolute or relative position\n   * @param {boolean} [relative=false] Whether to position relatively or absolutely\n   * @returns {Promise<Guild>}\n   */\n\n\n  setGuildPosition(guild, position, relative) {\n    const temp = Object.assign([], this.guildPositions);\n    Util.moveElementInArray(temp, guild.id, position, relative);\n    return this.update('guild_positions', temp).then(() => guild);\n  }\n  /**\n   * Add a guild to the list of restricted guilds.\n   * @param {Guild} guild The guild to add\n   * @returns {Promise<Guild>}\n   */\n\n\n  addRestrictedGuild(guild) {\n    const temp = Object.assign([], this.restrictedGuilds);\n    if (temp.includes(guild.id)) return Promise.reject(new Error('Guild is already restricted'));\n    temp.push(guild.id);\n    return this.update('restricted_guilds', temp).then(() => guild);\n  }\n  /**\n   * Remove a guild from the list of restricted guilds.\n   * @param {Guild} guild The guild to remove\n   * @returns {Promise<Guild>}\n   */\n\n\n  removeRestrictedGuild(guild) {\n    const temp = Object.assign([], this.restrictedGuilds);\n    const index = temp.indexOf(guild.id);\n    if (index < 0) return Promise.reject(new Error('Guild is not restricted'));\n    temp.splice(index, 1);\n    return this.update('restricted_guilds', temp).then(() => guild);\n  }\n\n}\n\nmodule.exports = ClientUserSettings;","map":null,"metadata":{},"sourceType":"script"}