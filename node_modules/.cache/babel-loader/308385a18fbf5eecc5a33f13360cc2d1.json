{"ast":null,"code":"const Collection = require('../util/Collection');\n\nconst Emoji = require('./Emoji');\n\nconst ReactionEmoji = require('./ReactionEmoji');\n/**\n * Represents a reaction to a message.\n */\n\n\nclass MessageReaction {\n  constructor(message, emoji, count, me) {\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n\n    this.me = me;\n    /**\n     * The number of people that have given the same reaction\n     * @type {number}\n     */\n\n    this.count = count || 0;\n    /**\n     * The users that have given this reaction, mapped by their ID\n     * @type {Collection<Snowflake, User>}\n     */\n\n    this.users = new Collection();\n    this._emoji = new ReactionEmoji(this, emoji.name, emoji.id);\n  }\n  /**\n   * The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {Emoji|ReactionEmoji}\n   * @readonly\n   */\n\n\n  get emoji() {\n    if (this._emoji instanceof Emoji) return this._emoji; // Check to see if the emoji has become known to the client\n\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis;\n\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n\n    return this._emoji;\n  }\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.message.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  remove(user = this.message.client.user) {\n    const message = this.message;\n    const userID = this.message.client.resolver.resolveUserID(user);\n    if (!userID) return Promise.reject(new Error('Couldn\\'t resolve the user ID to remove from the reaction.'));\n    return message.client.rest.methods.removeMessageReaction(message, this.emoji.identifier, userID);\n  }\n  /**\n   * Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {number} [limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Object} [options] Options to fetch users\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n\n\n  fetchUsers(limit = 100, {\n    after,\n    before\n  } = {}) {\n    const message = this.message;\n    return message.client.rest.methods.getMessageReactionUsers(message, this.emoji.identifier, {\n      after,\n      before,\n      limit\n    }).then(data => {\n      const users = new Collection();\n\n      for (const rawUser of data) {\n        const user = this.message.client.dataManager.newUser(rawUser);\n        this.users.set(user.id, user);\n        users.set(user.id, user);\n      }\n\n      return users;\n    });\n  }\n\n}\n\nmodule.exports = MessageReaction;","map":null,"metadata":{},"sourceType":"script"}