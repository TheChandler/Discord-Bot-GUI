{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chand\\\\Desktop\\\\electron-discord\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; //const electron = window.require('electron');\n\nconst Discord = require('discord.js');\n\nconst client = new Discord.Client();\n\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\nvar globalPage;\nclient.on('ready', () => {\n  console.log(\"\\n\\n\\nLogged in as \".concat(client.user.tag, \"!\"));\n  globalPage.setState({\n    guilds: client.guilds.array().map(x => {\n      return React.createElement(\"img\", {\n        onClick: () => clickGuild(x),\n        className: \"guildIcon\",\n        src: x.iconURL,\n        alt: x.name,\n        key: x.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n    }),\n    channels: client.channels.array().map(x => {\n      if (x.type === 'text') {\n        return React.createElement(\"div\", {\n          onClick: () => clickChannel(x),\n          className: \"channel\",\n          key: x.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, x.name);\n      }\n    })\n  });\n});\nclient.on('message', msg => {\n  globalPage.setState({\n    messages: globalPage.state.messages.concat(createMessage(msg))\n  });\n});\nclient.on('channelCreate', channel => {\n  globalPage.setState({\n    channels: globalPage.state.channels.concat(React.createElement(\"div\", {\n      onClick: () => clickChannel(channel),\n      className: \"channel\",\n      key: channel.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, channel.name))\n  });\n});\n\nfunction clickChannel(channel) {\n  if (channel.type != 'text') {\n    return;\n  }\n\n  for (var i = 0; i < globalPage.state.channels.length; i++) {\n    console.log(globalPage.state.channels[i]);\n  }\n\n  var messages;\n  channel.fetchMessages().then(msgs => {\n    globalPage.setState({\n      messages: msgs.map(x => {\n        return createMessage(x);\n      }).reverse()\n    });\n  });\n}\n\nfunction clickGuild(guild) {\n  globalPage.setState({\n    channels: guild.channels.map(x => {\n      if (x.type === 'text') {\n        return React.createElement(\"div\", {\n          onClick: () => clickChannel(x),\n          className: \"channel\",\n          id: \"x.id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, x.name);\n      }\n    })\n  });\n}\n\nfunction createMessage(msg) {\n  var nameColor = {\n    color: 'white',\n    color: msg.member.displayHexColor\n  };\n  var messageText = msg.cleanContent;\n  let match = messageText.match(/\\*\\*[^\\*]+\\*\\*/);\n  var newMessageText;\n\n  while (match != null) {\n    newMessageText = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, newMessageText, messageText.slice(0, match.index), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, match[0].slice(2, -2)));\n    messageText = messageText.slice(match.index + match[0].length);\n    match = messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n  }\n\n  newMessageText = React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, newMessageText, messageText);\n  msg.attachments.forEach(val => {\n    newMessageText = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: val.url,\n      className: \"embededImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), newMessageText);\n  });\n  return React.createElement(\"div\", {\n    className: \"message\",\n    key: msg.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: msg.author.avatarURL,\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"messageAuthor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    style: {\n      float: 'right'\n    },\n    type: \"checkbox\",\n    onClick: () => {\n      selectMessage(msg);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    style: {\n      float: 'right'\n    },\n    onClick: () => {\n      printMsg(msg);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, msg.author.tag), React.createElement(\"span\", {\n    style: nameColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, msg.member.displayName), React.createElement(\"span\", {\n    className: \"dateTime\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \" \", msg.createdAt.toLocaleString())), React.createElement(\"div\", {\n    className: \"messageText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, newMessageText)));\n}\n\nlet selectedMessages = new Map();\n\nfunction selectMessage(msg) {\n  selectedMessages.set(msg.id, msg);\n}\n\nfunction clearMessages() {\n  selectedMessages = new Map();\n}\n\nfunction printMessages() {\n  selectedMessages.forEach(printMsg);\n}\n\nfunction printMsg(val) {\n  console.log(val);\n}\n\nfunction deleteMessages() {\n  selectedMessages.forEach(deleteMsg);\n\n  function deleteMsg(val, key) {\n    val.delete();\n  }\n\n  clearMessages();\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: \"guilds\",\n      channels: 'channels',\n      messages: 'messages',\n      members: 'members'\n    };\n    globalPage = this;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Guilds, {\n      guilds: this.state.guilds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Channels, {\n      channels: this.state.channels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(Members, {\n      members: this.state.members,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }));\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Guilds extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guilds: this.props.guilds\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      guilds: props.guilds\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"guilds\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.state.guilds);\n  }\n\n}\n\nclass Channels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channels: this.props.channels\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      channels: props.channels\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.state.channels);\n  }\n\n}\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      messages: props.messages\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"messageButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"button\",\n      onClick: () => deleteMessages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"button\",\n      onClick: () => clearMessages(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Clear Selection\")), this.state.messages);\n  }\n\n  showMessages() {\n    console.log(this.state.messages);\n  }\n\n}\n\nclass Members extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      members: this.props.members\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      members: props.members\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"members\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.members);\n  }\n\n}\n\nReactDOM.render(React.createElement(Page, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 236\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/chand/Desktop/electron-discord/src/index.js"],"names":["React","ReactDOM","Discord","require","client","Client","auth","login","token","globalPage","on","console","log","user","tag","setState","guilds","array","map","x","clickGuild","iconURL","name","id","channels","type","clickChannel","msg","messages","state","concat","createMessage","channel","i","length","fetchMessages","then","msgs","reverse","guild","nameColor","color","member","displayHexColor","messageText","cleanContent","match","newMessageText","slice","index","attachments","forEach","val","url","author","avatarURL","float","selectMessage","printMsg","displayName","createdAt","toLocaleString","selectedMessages","Map","set","clearMessages","printMessages","deleteMessages","deleteMsg","key","delete","Page","Component","constructor","props","members","render","showMessages","Guilds","componentWillReceiveProps","Channels","Messages","Members","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//const electron = window.require('electron');\n\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst auth = require('./auth.json');\n\nclient.login(auth.token);\n\n\nvar globalPage;\nclient.on('ready', () => {\n    console.log(`\\n\\n\\nLogged in as ${client.user.tag}!`);\n    \n   \tglobalPage.setState({\n   \t\tguilds:client.guilds.array().map(x=>{\n   \t\t\treturn <img onClick={()=>clickGuild(x)} className=\"guildIcon\" src={x.iconURL} alt={x.name} key={x.id}/>\n   \t\t}),\n   \t\tchannels:client.channels.array().map(x=>{\n   \t\t\tif (x.type==='text'){\n\t   \t\t\treturn <div onClick={()=>clickChannel(x)}  className=\"channel\" key={x.id}>{x.name}</div>\n\t   \t\t}\n   \t\t})\n   \t});\n});\n\nclient.on('message', msg => {\n\tglobalPage.setState({\n\t\tmessages:globalPage.state.messages.concat(createMessage(msg)),\n\t});\n});\nclient.on('channelCreate',channel=>{\n\tglobalPage.setState({\n\t\tchannels:globalPage.state.channels.concat(<div onClick={()=>clickChannel(channel)}  className=\"channel\" key={channel.id}>{channel.name}</div>),\n\t})\n})\n\nfunction clickChannel(channel){\n\tif (channel.type!='text'){\n\t\treturn;\n\t}\n\tfor (var i=0;i<globalPage.state.channels.length;i++){\n\t\tconsole.log(globalPage.state.channels[i]);\n\t}\n\tvar messages;\n\tchannel.fetchMessages().then(msgs=>{\n\t\tglobalPage.setState({\n\t\t\tmessages:msgs.map(x=>{return createMessage(x)}).reverse()\n\t\t})\n\t});\n}\nfunction clickGuild(guild){\n\tglobalPage.setState({\n\t\tchannels:guild.channels.map(x=>{\n\t\t\tif (x.type==='text'){\n\t   \t\t\treturn <div onClick={()=>clickChannel(x)} className=\"channel\" id=\"x.id\">{x.name}</div>\n\t   \t\t}\n\t\t})\n\t});\n}\nfunction createMessage(msg){\n\tvar nameColor={\n\t\tcolor:'white',\n\t\tcolor:msg.member.displayHexColor,\n\t}\n\t\n\tvar messageText=msg.cleanContent;\n\tlet match=messageText.match(/\\*\\*[^\\*]+\\*\\*/);\n\tvar newMessageText;\n\twhile(match!=null){\n\t\tnewMessageText=<span>{newMessageText}{messageText.slice(0,match.index)}<b>{match[0].slice(2,-2)}</b></span>;\n\t\tmessageText=messageText.slice(match.index+match[0].length);\n\t\tmatch=messageText.match(/\\*{2}[^\\*]+\\*{2}/);\n\t}\n\tnewMessageText=<span>{newMessageText}{messageText}</span>;\n\tmsg.attachments.forEach((val)=>{\n\t\tnewMessageText=<span><img src={val.url} className=\"embededImage\"/>{newMessageText}</span>;\n\t})\n\n\treturn (<div className = \"message\" key={msg.id}>\n\t\t\t\t<img src={msg.author.avatarURL} className=\"avatar\"/>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"messageAuthor\">\n\t\t\t\t\t\t<input style={{float:'right'}}type=\"checkbox\" onClick={()=>{selectMessage(msg)}}></input>\n\t\t\t\t\t\t<span style={{float:'right'}} onClick={()=>{printMsg(msg)}}>{msg.author.tag}</span>\n\t\t\t\t\t\t<span style={nameColor}>{msg.member.displayName}</span>\n\t\t\t\t\t\t<span className=\"dateTime\"> {msg.createdAt.toLocaleString()}</span> \n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"messageText\">{newMessageText}</div>\n\t\t\t\t</div>\n\t\t\t</div>)\n}\nlet selectedMessages= new Map();\nfunction selectMessage(msg){\n\tselectedMessages.set(msg.id,msg);\n}\nfunction clearMessages(){\n\tselectedMessages= new Map();\n}\nfunction printMessages(){\n\tselectedMessages.forEach(printMsg);\n}\nfunction printMsg(val){\n\tconsole.log(val);\n}\nfunction deleteMessages(){\n\tselectedMessages.forEach(deleteMsg);\n\tfunction deleteMsg(val, key){\n\t\tval.delete(); \n\t}\n\tclearMessages();\n}\nclass Page extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:\"guilds\",\n\t\t\tchannels:'channels',\n\t\t\tmessages:'messages',\n\t\t\tmembers:'members'\n\t\t}\n\t\tglobalPage=this;\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Guilds guilds={this.state.guilds}/>\n\t\t\t\t<Channels channels={this.state.channels}/>\n\t\t\t\t<Messages messages={this.state.messages}/>\n\t\t\t\t<Members members={this.state.members}/>\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Guilds extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tguilds:this.props.guilds,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tguilds:props.guilds,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"guilds\">\n\t\t\t\t{this.state.guilds}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Channels extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tchannels:this.props.channels,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tchannels:props.channels,\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"channels\">\n\t\t\t\t{this.state.channels}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Messages extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmessages:this.props.messages,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmessages:props.messages\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"messages\">\n\t\t\t\t<div id=\"messageButtons\">\n\t\t\t\t\t<button type=\"button\" className=\"button\" onClick={()=>deleteMessages()}>Delete</button><button type=\"button\" className=\"button\" onClick={()=>clearMessages()}>Clear Selection</button>\n\t\t\t\t</div>\n\t\t\t\t{this.state.messages}\n\t\t\t</div>\n\t\t)\n\t}\n\tshowMessages(){\n\t\tconsole.log(this.state.messages);\n\t}\n}\n\nclass Members extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tmembers:this.props.members,\n\t\t}\n\t}\n\tcomponentWillReceiveProps(props){\n\t\tthis.setState({\n\t\t\tmembers:props.members\n\t\t})\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"members\">\n\t\t\t\t{this.state.members}\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nReactDOM.render(\n\t<Page />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}