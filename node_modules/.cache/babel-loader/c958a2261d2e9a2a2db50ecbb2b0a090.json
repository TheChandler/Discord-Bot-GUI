{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\Chandler\\\\Desktop\\\\electron-discord\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nconst Action = require('./Action');\n\nconst TextChannel = require('../../structures/TextChannel');\n\nconst VoiceChannel = require('../../structures/VoiceChannel');\n\nconst CategoryChannel = require('../../structures/CategoryChannel');\n\nconst NewsChannel = require('../../structures/NewsChannel');\n\nconst StoreChannel = require('../../structures/StoreChannel');\n\nconst Constants = require('../../util/Constants');\n\nconst ChannelTypes = Constants.ChannelTypes;\n\nconst Util = require('../../util/Util');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.get(data.id);\n\n    if (channel) {\n      const oldChannel = Util.cloneObject(channel); // If the channel is changing types, we need to follow a different process\n\n      if (ChannelTypes[channel.type.toUpperCase()] !== data.type) {\n        // Determine which channel class we're changing to\n        let channelClass;\n\n        switch (data.type) {\n          case ChannelTypes.TEXT:\n            channelClass = TextChannel;\n            break;\n\n          case ChannelTypes.VOICE:\n            channelClass = VoiceChannel;\n            break;\n\n          case ChannelTypes.CATEGORY:\n            channelClass = CategoryChannel;\n            break;\n\n          case ChannelTypes.NEWS:\n            channelClass = NewsChannel;\n            break;\n\n          case ChannelTypes.STORE:\n            channelClass = StoreChannel;\n            break;\n        } // Create the new channel instance and copy over cached data\n\n\n        const newChannel = new channelClass(channel.guild, data);\n\n        if (channel.messages && newChannel.messages) {\n          for (const _ref of channel.messages) {\n            var _ref2 = _slicedToArray(_ref, 2);\n\n            const id = _ref2[0];\n            const message = _ref2[1];\n            newChannel.messages.set(id, message);\n          }\n        }\n\n        channel = newChannel;\n        this.client.channels.set(channel.id, channel);\n      } else {\n        channel.setup(data);\n      }\n\n      client.emit(Constants.Events.CHANNEL_UPDATE, oldChannel, channel);\n      return {\n        old: oldChannel,\n        updated: channel\n      };\n    }\n\n    return {\n      old: null,\n      updated: null\n    };\n  }\n\n}\n/**\n * Emitted whenever a channel is updated - e.g. name change, topic change.\n * @event Client#channelUpdate\n * @param {Channel} oldChannel The channel before the update\n * @param {Channel} newChannel The channel after the update\n */\n\n\nmodule.exports = ChannelUpdateAction;","map":null,"metadata":{},"sourceType":"script"}