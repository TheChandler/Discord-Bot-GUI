{"ast":null,"code":"const EventEmitter = require('events').EventEmitter;\n\nconst Constants = require('../../util/Constants');\n\nconst WebSocketConnection = require('./WebSocketConnection');\n/**\n * WebSocket Manager of the client.\n * @private\n */\n\n\nclass WebSocketManager extends EventEmitter {\n  constructor(client) {\n    super();\n    /**\n     * The client that instantiated this WebSocketManager\n     * @type {Client}\n     */\n\n    this.client = client;\n    /**\n     * The WebSocket connection of this manager\n     * @type {?WebSocketConnection}\n     */\n\n    this.connection = null;\n  }\n  /**\n   * Sends a heartbeat on the available connection.\n   * @returns {void}\n   */\n\n\n  heartbeat() {\n    if (!this.connection) return this.debug('No connection to heartbeat');\n    return this.connection.heartbeat();\n  }\n  /**\n   * Emits a debug event.\n   * @param {string} message Debug message\n   * @returns {void}\n   */\n\n\n  debug(message) {\n    return this.client.emit('debug', \"[ws] \".concat(message));\n  }\n  /**\n   * Destroy the client.\n   * @returns {void} Whether or not destruction was successful\n   */\n\n\n  destroy() {\n    if (!this.connection) {\n      this.debug('Attempted to destroy WebSocket but no connection exists!');\n      return false;\n    }\n\n    return this.connection.destroy();\n  }\n  /**\n   * Send a packet on the available WebSocket.\n   * @param {Object} packet Packet to send\n   * @returns {void}\n   */\n\n\n  send(packet) {\n    if (!this.connection) {\n      this.debug('No connection to websocket');\n      return;\n    }\n\n    this.connection.send(packet);\n  }\n  /**\n   * Connects the client to a gateway.\n   * @param {string} gateway The gateway to connect to\n   * @returns {boolean}\n   */\n\n\n  connect(gateway) {\n    if (!this.connection) {\n      this.connection = new WebSocketConnection(this, gateway);\n      return true;\n    }\n\n    switch (this.connection.status) {\n      case Constants.Status.IDLE:\n      case Constants.Status.DISCONNECTED:\n        this.connection.connect(gateway, 5500);\n        return true;\n\n      default:\n        this.debug(\"Couldn't connect to \".concat(gateway, \" as the websocket is at state \").concat(this.connection.status));\n        return false;\n    }\n  }\n\n}\n\nmodule.exports = WebSocketManager;","map":null,"metadata":{},"sourceType":"script"}